{"version":3,"sources":["../node_modules/workbox-core/_version.js","../node_modules/workbox-core/models/messages/messageGenerator.js","../node_modules/workbox-core/_private/WorkboxError.js","../node_modules/workbox-core/_private/cacheNames.js","../node_modules/workbox-core/_private/waitUntil.js","../node_modules/workbox-precaching/_version.js","../node_modules/workbox-precaching/utils/createCacheKey.js","../node_modules/workbox-precaching/utils/PrecacheInstallReportPlugin.js","../node_modules/workbox-precaching/utils/PrecacheCacheKeyPlugin.js","../node_modules/workbox-core/_private/canConstructResponseFromBodyStream.js","../node_modules/workbox-core/copyResponse.js","../node_modules/workbox-core/_private/getFriendlyURL.js","../node_modules/workbox-core/_private/cacheMatchIgnoreParams.js","../node_modules/workbox-core/_private/Deferred.js","../node_modules/workbox-core/models/quotaErrorCallbacks.js","../node_modules/workbox-core/_private/executeQuotaErrorCallbacks.js","../node_modules/workbox-core/_private/timeout.js","../node_modules/workbox-strategies/_version.js","../node_modules/workbox-strategies/StrategyHandler.js","../node_modules/workbox-strategies/Strategy.js","../node_modules/workbox-precaching/PrecacheStrategy.js","../node_modules/workbox-precaching/PrecacheController.js","../node_modules/workbox-precaching/utils/getOrCreatePrecacheController.js","../node_modules/workbox-routing/_version.js","../node_modules/workbox-routing/utils/constants.js","../node_modules/workbox-routing/utils/normalizeHandler.js","../node_modules/workbox-routing/Route.js","../node_modules/workbox-routing/RegExpRoute.js","../node_modules/workbox-routing/Router.js","../node_modules/workbox-routing/utils/getOrCreateDefaultRouter.js","../node_modules/workbox-routing/registerRoute.js","../node_modules/workbox-precaching/utils/removeIgnoredSearchParams.js","../node_modules/workbox-precaching/utils/generateURLVariations.js","../node_modules/workbox-precaching/PrecacheRoute.js","../node_modules/workbox-precaching/addRoute.js","../node_modules/workbox-precaching/utils/deleteOutdatedCaches.js","../node_modules/workbox-precaching/cleanupOutdatedCaches.js","../node_modules/workbox-precaching/precache.js","../node_modules/workbox-precaching/precacheAndRoute.js","../node_modules/workbox-navigation-preload/_version.js","../node_modules/workbox-navigation-preload/isSupported.js","../node_modules/workbox-navigation-preload/enable.js","../node_modules/workbox-core/clientsClaim.js","../resources/js/worker.js"],"names":["fallback","code","args","msg","messageGenerator","WorkboxError","errorCode","details","message","_cacheNameDetails","_createCacheName","cacheName","value","eachCacheNameDetail","fn","key","cacheNames","userCacheName","waitUntil","event","asyncFn","returnPromise","REVISION_SEARCH_PARAM","createCacheKey","entry","urlObject","revision","url","cacheKeyURL","originalURL","PrecacheInstallReportPlugin","request","state","cachedResponse","PrecacheCacheKeyPlugin","precacheController","params","cacheKey","supportStatus","canConstructResponseFromBodyStream","testResponse","copyResponse","response","modifier","origin","clonedResponse","modifiedResponseInit","body","getFriendlyURL","stripParams","fullURL","ignoreParams","strippedURL","param","cacheMatchIgnoreParams","cache","matchOptions","strippedRequestURL","keysOptions","cacheKeys","strippedCacheKeyURL","Deferred","resolve","reject","quotaErrorCallbacks","executeQuotaErrorCallbacks","callback","timeout","ms","toRequest","input","StrategyHandler","strategy","options","plugin","possiblePreloadResponse","originalRequest","cb","err","pluginFilteredRequest","fetchResponse","error","responseClone","effectiveRequest","multiMatchOptions","responseToCache","hasCacheUpdateCallback","oldResponse","mode","name","statefulParam","promise","pluginsUsed","Strategy","responseDone","handler","handlerDone","waitUntilError","PrecacheStrategy","integrityInManifest","integrityInRequest","noIntegrityConflict","defaultPluginIndex","cacheWillUpdatePluginCount","index","PrecacheController","plugins","fallbackToNetwork","entries","urlsToWarnAbout","cacheMode","warningMessage","installReportPlugin","integrity","updatedURLs","notUpdatedURLs","currentlyCachedRequests","expectedCacheKeys","deletedURLs","getOrCreatePrecacheController","defaultMethod","normalizeHandler","Route","match","method","RegExpRoute","regExp","result","Router","responsePromise","payload","requestPromises","sameOrigin","route","catchHandler","catchErr","routes","matchResult","routeIndex","defaultRouter","getOrCreateDefaultRouter","registerRoute","capture","captureUrl","matchCallback","removeIgnoredSearchParams","ignoreURLParametersMatching","paramName","generateURLVariations","directoryIndex","cleanURLs","urlManipulation","urlWithoutIgnoredParams","directoryURL","cleanURL","additionalURLs","urlToAttempt","PrecacheRoute","urlsToCacheKeys","possibleURL","addRoute","precacheRoute","SUBSTRING_TO_FIND","deleteOutdatedCaches","currentPrecacheName","substringToFind","cacheNamesToDelete","cleanupOutdatedCaches","cachesDeleted","precache","precacheAndRoute","isSupported","enable","headerValue","clientsClaim","CACHE","offlineFallbackPage","navigationPreload.isSupported","navigationPreload.enable","preloadResp","sendNotification","data","clickedNotification","promiseChain","windowClients","matchingClient","windowClient"],"mappings":"AAEA,GAAI,CACA,KAAK,oBAAoB,GAAK,GAClC,MACU,CAAA,CCIV,MAAM,EAAW,CAAC,KAAS,IAAS,CAChC,IAAI,EAAM,EACN,OAAA,EAAK,OAAS,IACd,GAAO,OAAO,KAAK,UAAU,CAAI,CAAC,IAE/B,CACX,EAQa,EAA2D,ECLxE,MAAM,UAAqB,KAAM,CAS7B,YAAY,EAAW,EAAS,CAC5B,MAAM,EAAU,EAAiB,EAAW,CAAO,EACnD,MAAM,CAAO,EACb,KAAK,KAAO,EACZ,KAAK,QAAU,CAClB,CACL,CCzBA,MAAM,EAAoB,CACtB,gBAAiB,kBACjB,SAAU,cACV,OAAQ,UACR,QAAS,UACT,OAAQ,OAAO,aAAiB,IAAc,aAAa,MAAQ,EACvE,EACM,EAAoB,GACf,CAAC,EAAkB,OAAQ,EAAW,EAAkB,MAAM,EAChE,OAAQ,GAAU,GAAS,EAAM,OAAS,CAAC,EAC3C,KAAK,GAAG,EAEX,EAAuB,GAAO,CAChC,UAAW,KAAO,OAAO,KAAK,CAAiB,EAC3C,EAAG,CAAG,CAEd,EACa,EAAa,CACtB,cAAgB,GAAY,CACxB,EAAqB,GAAQ,CACrB,OAAO,EAAQ,CAAG,GAAM,WACxB,EAAkB,CAAG,EAAI,EAAQ,CAAG,EAEpD,CAAS,CACJ,EACD,uBAAyB,GACd,GAAiB,EAAiB,EAAkB,eAAe,EAE9E,gBAAkB,GACP,GAAiB,EAAiB,EAAkB,QAAQ,EAEvE,UAAW,IACA,EAAkB,OAE7B,eAAiB,GACN,GAAiB,EAAiB,EAAkB,OAAO,EAEtE,UAAW,IACA,EAAkB,MAEjC,EChCA,SAAS,EAAU,EAAO,EAAS,CAC/B,MAAM,EAAgB,IACtB,OAAA,EAAM,UAAU,CAAa,EACtB,CACX,CClBA,GAAI,CACA,KAAK,0BAA0B,GAAK,GACxC,MACU,CAAA,CCKV,MAAM,EAAwB,kBAUvB,SAAS,EAAe,EAAO,CAClC,GAAI,CAAC,EACD,MAAM,IAAI,EAAa,oCAAqC,CAAE,MAAA,CAAO,CAAA,EAIzE,GAAI,OAAO,GAAU,SAAU,CAC3B,MAAM,EAAY,IAAI,IAAI,EAAO,SAAS,IAAI,EAC9C,MAAO,CACH,SAAU,EAAU,KACpB,IAAK,EAAU,IAC3B,CACK,CACD,KAAM,CAAE,SAAA,EAAU,IAAA,CAAK,EAAG,EAC1B,GAAI,CAAC,EACD,MAAM,IAAI,EAAa,oCAAqC,CAAE,MAAA,CAAO,CAAA,EAIzE,GAAI,CAAC,EAAU,CACX,MAAM,EAAY,IAAI,IAAI,EAAK,SAAS,IAAI,EAC5C,MAAO,CACH,SAAU,EAAU,KACpB,IAAK,EAAU,IAC3B,CACK,CAGD,MAAM,EAAc,IAAI,IAAI,EAAK,SAAS,IAAI,EACxC,EAAc,IAAI,IAAI,EAAK,SAAS,IAAI,EAC9C,OAAA,EAAY,aAAa,IAAI,EAAuB,CAAQ,EACrD,CACH,SAAU,EAAY,KACtB,IAAK,EAAY,IACzB,CACA,CCzCA,MAAM,CAA4B,CAC9B,aAAc,CACV,KAAK,YAAc,GACnB,KAAK,eAAiB,GACtB,KAAK,iBAAmB,MAAO,CAAE,QAAA,EAAS,MAAA,CAAK,IAAQ,CAE/C,IACA,EAAM,gBAAkB,EAExC,EACQ,KAAK,yBAA2B,MAAO,CAAE,MAAA,EAAO,MAAA,EAAO,eAAA,CAAc,IAAQ,CACzE,GAAI,EAAM,OAAS,WACX,GACA,EAAM,iBACN,EAAM,2BAA2B,QAAS,CAE1C,MAAM,EAAM,EAAM,gBAAgB,IAC9B,EACA,KAAK,eAAe,KAAK,CAAG,EAG5B,KAAK,YAAY,KAAK,CAAG,CAEhC,CAEL,OAAO,CACnB,CACK,CACL,CC5BA,MAAM,CAAuB,CACzB,YAAY,CAAE,mBAAA,GAAsB,CAChC,KAAK,mBAAqB,MAAO,CAAE,QAAA,EAAS,OAAA,CAAM,IAAQ,CAGtD,MAAM,GAAY,GAAW,KAA4B,OAAS,EAAO,WACrE,KAAK,oBAAoB,kBAAkB,EAAQ,GAAG,EAE1D,OAAO,EACD,IAAI,QAAQ,EAAU,CAAE,QAAS,EAAQ,OAAO,CAAE,EAClD,CAClB,EACQ,KAAK,oBAAsB,CAC9B,CACL,CCpBA,IAAI,EAUJ,SAAS,GAAqC,CAC1C,GAAI,IAAkB,OAAW,CAC7B,MAAM,EAAe,IAAI,SAAS,EAAE,EACpC,GAAI,SAAU,EACV,GAAI,CACA,IAAI,SAAS,EAAa,IAAI,EAC9B,EAAgB,EACnB,MACa,CACV,EAAgB,EACnB,CAEL,EAAgB,EACnB,CACD,OAAO,CACX,CCJA,eAAe,EAAa,EAAU,EAAU,CAC5C,IAAI,EAAS,KAMb,GAJI,EAAS,MAET,EADoB,IAAI,IAAI,EAAS,GAAG,EACnB,QAErB,IAAW,KAAK,SAAS,OACzB,MAAM,IAAI,EAAa,6BAA8B,CAAE,OAAA,CAAQ,CAAA,EAEnE,MAAM,EAAiB,EAAS,QAQ1B,EANe,CACjB,QAAS,IAAI,QAAQ,EAAe,OAAO,EAC3C,OAAQ,EAAe,OACvB,WAAY,EAAe,UACnC,EAMU,EAAO,EAAoC,EAC3C,EAAe,KACf,MAAM,EAAe,OAC3B,OAAO,IAAI,SAAS,EAAM,CAAoB,CAClD,CC/CA,MAAM,EAAkB,GACL,IAAI,IAAI,OAAO,CAAG,EAAG,SAAS,IAAI,EAGnC,KAAK,QAAQ,IAAI,OAAO,IAAI,SAAS,MAAM,EAAE,EAAG,EAAE,ECLpE,SAAS,EAAY,EAAS,EAAc,CACxC,MAAM,EAAc,IAAI,IAAI,CAAO,EACnC,UAAW,KAAS,EAChB,EAAY,aAAa,OAAO,CAAK,EAEzC,OAAO,EAAY,IACvB,CAaA,eAAe,EAAuB,EAAO,EAAS,EAAc,EAAc,CAC9E,MAAM,EAAqB,EAAY,EAAQ,IAAK,CAAY,EAEhE,GAAI,EAAQ,MAAQ,EAChB,OAAO,EAAM,MAAM,EAAS,CAAY,EAG5C,MAAM,EAAc,OAAO,OAAO,OAAO,OAAO,GAAI,CAAY,EAAG,CAAE,aAAc,EAAM,CAAA,EACnF,EAAY,MAAM,EAAM,KAAK,EAAS,CAAW,EACvD,UAAW,KAAY,EAAW,CAC9B,MAAM,EAAsB,EAAY,EAAS,IAAK,CAAY,EAClE,GAAI,IAAuB,EACvB,OAAO,EAAM,MAAM,EAAU,CAAY,CAEhD,CAEL,CC1BA,MAAM,CAAS,CAIX,aAAc,CACV,KAAK,QAAU,IAAI,QAAQ,CAAC,EAAS,IAAW,CAC5C,KAAK,QAAU,EACf,KAAK,OAAS,CAC1B,CAAS,CACJ,CACL,CCfA,MAAM,EAAsB,IAAI,ICMhC,eAAe,GAA6B,CAKxC,UAAW,KAAY,EACnB,MAAM,EAAS,CAQvB,CChBO,SAAS,EAAQ,EAAI,CACxB,OAAO,IAAI,QAAS,GAAY,WAAW,EAAS,CAAE,CAAC,CAC3D,CCfA,GAAI,CACA,KAAK,0BAA0B,GAAK,GACxC,MACU,CAAA,CCWV,SAAS,EAAU,EAAO,CACtB,OAAO,OAAO,GAAU,SAAW,IAAI,QAAQ,CAAK,EAAI,CAC5D,CAUA,MAAM,CAAgB,CAiBlB,YAAY,EAAU,EAAS,CAC3B,KAAK,WAAa,GA8CX,OAAA,OAAO,KAAM,CAAO,EAC3B,KAAK,MAAQ,EAAQ,MACrB,KAAK,UAAY,EACZ,KAAA,iBAAmB,IAAI,EAC5B,KAAK,wBAA0B,GAG/B,KAAK,SAAW,CAAC,GAAG,EAAS,OAAO,EAC/B,KAAA,oBAAsB,IAChB,UAAA,KAAU,KAAK,SACtB,KAAK,gBAAgB,IAAI,EAAQ,CAAE,CAAA,EAEvC,KAAK,MAAM,UAAU,KAAK,iBAAiB,OAAO,CACtD,CAcA,MAAM,MAAM,EAAO,CACT,KAAA,CAAE,MAAA,CAAU,EAAA,KACd,IAAA,EAAU,EAAU,CAAK,EAC7B,GAAI,EAAQ,OAAS,YACjB,aAAiB,YACjB,EAAM,gBAAiB,CACjB,MAAA,EAA2B,MAAM,EAAM,gBAC7C,GAAI,EAKO,OAAA,CAEf,CAIA,MAAM,EAAkB,KAAK,YAAY,cAAc,EACjD,EAAQ,MACR,EAAA,KACF,GAAA,CACA,UAAW,KAAM,KAAK,iBAAiB,kBAAkB,EAC3C,EAAA,MAAM,EAAG,CAAE,QAAS,EAAQ,MAAM,EAAG,MAAA,EAAO,QAGvD,EAAK,CACR,GAAI,aAAe,MACT,MAAA,IAAI,EAAa,kCAAmC,CACtD,mBAAoB,EAAI,OAAA,CAC3B,CAET,CAIM,MAAA,EAAwB,EAAQ,QAClC,GAAA,CACI,IAAA,EAEY,EAAA,MAAM,MAAM,EAAS,EAAQ,OAAS,WAAa,OAAY,KAAK,UAAU,YAAY,EAM1G,UAAW,KAAY,KAAK,iBAAiB,iBAAiB,EAC1D,EAAgB,MAAM,EAAS,CAC3B,MAAA,EACA,QAAS,EACT,SAAU,CAAA,CACb,EAEE,OAAA,QAEJ,EAAO,CAOV,MAAI,GACM,MAAA,KAAK,aAAa,eAAgB,CACpC,MAAA,EACA,MAAA,EACA,gBAAiB,EAAgB,MAAM,EACvC,QAAS,EAAsB,MAAM,CAAA,CACxC,EAEC,CACV,CACJ,CAWA,MAAM,iBAAiB,EAAO,CAC1B,MAAM,EAAW,MAAM,KAAK,MAAM,CAAK,EACjC,EAAgB,EAAS,QAC/B,OAAK,KAAK,UAAU,KAAK,SAAS,EAAO,CAAa,CAAC,EAChD,CACX,CAaA,MAAM,WAAW,EAAK,CACZ,MAAA,EAAU,EAAU,CAAG,EACzB,IAAA,EACJ,KAAM,CAAE,UAAA,EAAW,aAAA,GAAiB,KAAK,UACnC,EAAmB,MAAM,KAAK,YAAY,EAAS,MAAM,EACzD,EAAoB,OAAO,OAAO,OAAO,OAAO,CAAC,EAAG,CAAY,EAAG,CAAE,UAAA,CAAA,CAAW,EACtF,EAAiB,MAAM,OAAO,MAAM,EAAkB,CAAiB,EASvE,UAAW,KAAY,KAAK,iBAAiB,0BAA0B,EACnE,EACK,MAAM,EAAS,CACZ,UAAA,EACA,aAAA,EACA,eAAA,EACA,QAAS,EACT,MAAO,KAAK,KAAA,CACf,GAAM,OAER,OAAA,CACX,CAgBA,MAAM,SAAS,EAAK,EAAU,CACpB,MAAA,EAAU,EAAU,CAAG,EAG7B,MAAM,EAAQ,CAAC,EACf,MAAM,EAAmB,MAAM,KAAK,YAAY,EAAS,OAAO,EAiBhE,GAAI,CAAC,EAKK,MAAA,IAAI,EAAa,6BAA8B,CACjD,IAAK,EAAe,EAAiB,GAAG,CAAA,CAC3C,EAEL,MAAM,EAAkB,MAAM,KAAK,2BAA2B,CAAQ,EACtE,GAAI,CAAC,EAKM,MAAA,GAEX,KAAM,CAAE,UAAA,EAAW,aAAA,GAAiB,KAAK,UACnC,EAAQ,MAAM,KAAK,OAAO,KAAK,CAAS,EACxC,EAAyB,KAAK,YAAY,gBAAgB,EAC1D,EAAc,EACd,MAAM,EAIR,EAAO,EAAiB,MAAM,EAAG,CAAC,iBAAiB,EAAG,CACpD,EAAA,KAKF,GAAA,CACA,MAAM,EAAM,IAAI,EAAkB,EAAyB,EAAgB,MAAA,EAAU,CAAe,QAEjG,EAAO,CACV,GAAI,aAAiB,MAEb,MAAA,EAAM,OAAS,sBACf,MAAM,EAA2B,EAE/B,CAEd,CACA,UAAW,KAAY,KAAK,iBAAiB,gBAAgB,EACzD,MAAM,EAAS,CACX,UAAA,EACA,YAAA,EACA,YAAa,EAAgB,MAAM,EACnC,QAAS,EACT,MAAO,KAAK,KAAA,CACf,EAEE,MAAA,EACX,CAYA,MAAM,YAAY,EAAS,EAAM,CAC7B,MAAM,EAAM,GAAG,EAAQ,GAAG,MAAM,CAAI,GACpC,GAAI,CAAC,KAAK,WAAW,CAAG,EAAG,CACvB,IAAI,EAAmB,EACvB,UAAW,KAAY,KAAK,iBAAiB,oBAAoB,EAC1C,EAAA,EAAU,MAAM,EAAS,CACxC,KAAA,EACA,QAAS,EACT,MAAO,KAAK,MAEZ,OAAQ,KAAK,MAChB,CAAA,CAAC,EAED,KAAA,WAAW,CAAG,EAAI,CAC3B,CACO,OAAA,KAAK,WAAW,CAAG,CAC9B,CAQA,YAAY,EAAM,CACH,UAAA,KAAU,KAAK,UAAU,QAChC,GAAI,KAAQ,EACD,MAAA,GAGR,MAAA,EACX,CAiBA,MAAM,aAAa,EAAM,EAAO,CAC5B,UAAW,KAAY,KAAK,iBAAiB,CAAI,EAG7C,MAAM,EAAS,CAAK,CAE5B,CAUA,CAAC,iBAAiB,EAAM,CACT,UAAA,KAAU,KAAK,UAAU,QAChC,GAAI,OAAO,EAAO,CAAI,GAAM,WAAY,CACpC,MAAM,EAAQ,KAAK,gBAAgB,IAAI,CAAM,EAOvC,MANoB,GAAU,CAC1B,MAAA,EAAgB,OAAO,OAAO,OAAO,OAAO,CAAC,EAAG,CAAK,EAAG,CAAE,MAAA,CAAA,CAAO,EAGhE,OAAA,EAAO,CAAI,EAAE,CAAa,CAAA,CAGzC,CAER,CAcA,UAAU,EAAS,CACV,YAAA,wBAAwB,KAAK,CAAO,EAClC,CACX,CAWA,MAAM,aAAc,CACZ,IAAA,EACJ,KAAQ,EAAU,KAAK,wBAAwB,MAAA,GACrC,MAAA,CAEd,CAKA,SAAU,CACD,KAAA,iBAAiB,QAAQ,IAAI,CACtC,CAWA,MAAM,2BAA2B,EAAU,CACvC,IAAI,EAAkB,EAClB,EAAc,GAClB,UAAW,KAAY,KAAK,iBAAiB,iBAAiB,EAQ1D,GAPA,EACK,MAAM,EAAS,CACZ,QAAS,KAAK,QACd,SAAU,EACV,MAAO,KAAK,KAAA,CACf,GAAM,OACG,EAAA,GACV,CAAC,EACD,MAGR,OAAK,GACG,GAAmB,EAAgB,SAAW,MAC5B,EAAA,QAmBnB,CACX,CACJ,CCjfA,MAAM,CAAS,CAuBX,YAAY,EAAU,GAAI,CAQtB,KAAK,UAAY,EAAW,eAAe,EAAQ,SAAS,EAQvD,KAAA,QAAU,EAAQ,SAAW,CAAA,EAQlC,KAAK,aAAe,EAAQ,aAQ5B,KAAK,aAAe,EAAQ,YAChC,CAoBA,OAAO,EAAS,CACZ,KAAM,CAAC,CAAY,EAAI,KAAK,UAAU,CAAO,EACtC,OAAA,CACX,CAuBA,UAAU,EAAS,CAEX,aAAmB,aACT,EAAA,CACN,MAAO,EACP,QAAS,EAAQ,OAAA,GAGzB,MAAM,EAAQ,EAAQ,MAChB,EAAU,OAAO,EAAQ,SAAY,SACrC,IAAI,QAAQ,EAAQ,OAAO,EAC3B,EAAQ,QACR,EAAS,WAAY,EAAU,EAAQ,OAAS,OAChD,EAAU,IAAI,EAAgB,KAAM,CAAE,MAAA,EAAO,QAAA,EAAS,OAAA,EAAQ,EAC9D,EAAe,KAAK,aAAa,EAAS,EAAS,CAAK,EACxD,EAAc,KAAK,eAAe,EAAc,EAAS,EAAS,CAAK,EAEtE,MAAA,CAAC,EAAc,CAAW,CACrC,CACA,MAAM,aAAa,EAAS,EAAS,EAAO,CACxC,MAAM,EAAQ,aAAa,mBAAoB,CAAE,MAAA,EAAO,QAAA,EAAS,EACjE,IAAI,EACA,GAAA,CAKA,GAJA,EAAW,MAAM,KAAK,QAAQ,EAAS,CAAO,EAI1C,CAAC,GAAY,EAAS,OAAS,QAC/B,MAAM,IAAI,EAAa,cAAe,CAAE,IAAK,EAAQ,IAAK,QAG3D,EAAO,CACV,GAAI,aAAiB,OACjB,UAAW,KAAY,EAAQ,iBAAiB,iBAAiB,EAE7D,GADA,EAAW,MAAM,EAAS,CAAE,MAAA,EAAO,MAAA,EAAO,QAAA,EAAS,EAC/C,EACA,MAIZ,GAAI,CAAC,EACK,MAAA,CAOd,CACA,UAAW,KAAY,EAAQ,iBAAiB,oBAAoB,EAChE,EAAW,MAAM,EAAS,CAAE,MAAA,EAAO,QAAA,EAAS,SAAA,EAAU,EAEnD,OAAA,CACX,CACA,MAAM,eAAe,EAAc,EAAS,EAAS,EAAO,CACpD,IAAA,EACA,EACA,GAAA,CACA,EAAW,MAAM,OAEP,CAId,CACI,GAAA,CACM,MAAA,EAAQ,aAAa,oBAAqB,CAC5C,MAAA,EACA,QAAA,EACA,SAAA,CAAA,CACH,EACD,MAAM,EAAQ,oBAEX,EAAgB,CACf,aAA0B,QAClB,EAAA,EAEhB,CAQA,GAPM,MAAA,EAAQ,aAAa,qBAAsB,CAC7C,MAAA,EACA,QAAA,EACA,SAAA,EACA,MAAA,CAAA,CACH,EACD,EAAQ,QAAQ,EACZ,EACM,MAAA,CAEd,CACJ,CCvLA,MAAM,UAAyB,CAAS,CAkBpC,YAAY,EAAU,GAAI,CACtB,EAAQ,UAAY,EAAW,gBAAgB,EAAQ,SAAS,EAChE,MAAM,CAAO,EACb,KAAK,mBACD,EAAQ,oBAAsB,GAK7B,KAAA,QAAQ,KAAK,EAAiB,sCAAsC,CAC7E,CAQA,MAAM,QAAQ,EAAS,EAAS,CAC5B,MAAM,EAAW,MAAM,EAAQ,WAAW,CAAO,EACjD,OAAI,IAKA,EAAQ,OAAS,EAAQ,MAAM,OAAS,UACjC,MAAM,KAAK,eAAe,EAAS,CAAO,EAI9C,MAAM,KAAK,aAAa,EAAS,CAAO,EACnD,CACA,MAAM,aAAa,EAAS,EAAS,CAC7B,IAAA,EACE,MAAA,EAAU,EAAQ,QAAU,GAElC,GAAI,KAAK,mBAAoB,CAMzB,MAAM,EAAsB,EAAO,UAC7B,EAAqB,EAAQ,UAC7B,EAAsB,CAAC,GAAsB,IAAuB,EAG1E,EAAW,MAAM,EAAQ,MAAM,IAAI,QAAQ,EAAS,CAChD,UAAW,EAAQ,OAAS,UACtB,GAAsB,EACtB,MACT,CAAA,CAAC,EAQE,GACA,GACA,EAAQ,OAAS,YACjB,KAAK,sCAAsC,EACzB,MAAM,EAAQ,SAAS,EAAS,EAAS,OAAO,EAOtE,KAKM,OAAA,IAAI,EAAa,yBAA0B,CAC7C,UAAW,KAAK,UAChB,IAAK,EAAQ,GAAA,CAChB,EAgBE,OAAA,CACX,CACA,MAAM,eAAe,EAAS,EAAS,CACnC,KAAK,sCAAsC,EAC3C,MAAM,EAAW,MAAM,EAAQ,MAAM,CAAO,EAI5C,GAAI,CADc,MAAM,EAAQ,SAAS,EAAS,EAAS,OAAO,EAIxD,MAAA,IAAI,EAAa,0BAA2B,CAC9C,IAAK,EAAQ,IACb,OAAQ,EAAS,MAAA,CACpB,EAEE,OAAA,CACX,CA4BA,uCAAwC,CACpC,IAAI,EAAqB,KACrB,EAA6B,EACjC,SAAW,CAAC,EAAO,CAAM,IAAK,KAAK,QAAQ,UAEnC,IAAW,EAAiB,yCAI5B,IAAW,EAAiB,oCACP,EAAA,GAErB,EAAO,iBACP,KAGJ,IAA+B,EAC1B,KAAA,QAAQ,KAAK,EAAiB,iCAAiC,EAE/D,EAA6B,GAAK,IAAuB,MAEzD,KAAA,QAAQ,OAAO,EAAoB,CAAC,CAGjD,CACJ,CACA,EAAiB,kCAAoC,CACjD,MAAM,gBAAgB,CAAE,SAAA,GAAY,CAChC,MAAI,CAAC,GAAY,EAAS,QAAU,IACzB,KAEJ,CACX,CACJ,EACA,EAAiB,uCAAyC,CACtD,MAAM,gBAAgB,CAAE,SAAA,GAAY,CAChC,OAAO,EAAS,WAAa,MAAM,EAAa,CAAQ,EAAI,CAChE,CACJ,ECrMA,MAAM,CAAmB,CAWrB,YAAY,CAAE,UAAA,EAAW,QAAA,EAAU,GAAI,kBAAA,EAAoB,EAAU,EAAA,GAAI,CAChE,KAAA,qBAAuB,IACvB,KAAA,sBAAwB,IACxB,KAAA,4BAA8B,IAC9B,KAAA,UAAY,IAAI,EAAiB,CAClC,UAAW,EAAW,gBAAgB,CAAS,EAC/C,QAAS,CACL,GAAG,EACH,IAAI,EAAuB,CAAE,mBAAoB,KAAM,CAC3D,EACA,kBAAA,CAAA,CACH,EAED,KAAK,QAAU,KAAK,QAAQ,KAAK,IAAI,EACrC,KAAK,SAAW,KAAK,SAAS,KAAK,IAAI,CAC3C,CAKA,IAAI,UAAW,CACX,OAAO,KAAK,SAChB,CAWA,SAAS,EAAS,CACd,KAAK,eAAe,CAAO,EACtB,KAAK,kCACD,KAAA,iBAAiB,UAAW,KAAK,OAAO,EACxC,KAAA,iBAAiB,WAAY,KAAK,QAAQ,EAC/C,KAAK,gCAAkC,GAE/C,CAQA,eAAe,EAAS,CASpB,MAAM,EAAkB,CAAA,EACxB,UAAW,KAAS,EAAS,CAErB,OAAO,GAAU,SACjB,EAAgB,KAAK,CAAK,EAErB,GAAS,EAAM,WAAa,QACjB,EAAA,KAAK,EAAM,GAAG,EAElC,KAAM,CAAE,SAAA,EAAU,IAAA,CAAI,EAAI,EAAe,CAAK,EACxC,EAAY,OAAO,GAAU,UAAY,EAAM,SAAW,SAAW,UACvE,GAAA,KAAK,iBAAiB,IAAI,CAAG,GAC7B,KAAK,iBAAiB,IAAI,CAAG,IAAM,EAC7B,MAAA,IAAI,EAAa,wCAAyC,CAC5D,WAAY,KAAK,iBAAiB,IAAI,CAAG,EACzC,YAAa,CAAA,CAChB,EAEL,GAAI,OAAO,GAAU,UAAY,EAAM,UAAW,CAC1C,GAAA,KAAK,wBAAwB,IAAI,CAAQ,GACzC,KAAK,wBAAwB,IAAI,CAAQ,IAAM,EAAM,UAC/C,MAAA,IAAI,EAAa,4CAA6C,CAChE,IAAA,CAAA,CACH,EAEL,KAAK,wBAAwB,IAAI,EAAU,EAAM,SAAS,CAC9D,CAGI,GAFC,KAAA,iBAAiB,IAAI,EAAK,CAAQ,EAClC,KAAA,kBAAkB,IAAI,EAAK,CAAS,EACrC,EAAgB,OAAS,EAAG,CAC5B,MAAM,EAAiB,qDACV,EAAgB,KAAK,IAAI,CAAC;AAAA,sEAKnC,QAAQ,KAAK,CAAc,CAKnC,CACJ,CACJ,CAWA,QAAQ,EAAO,CAGJ,OAAA,EAAU,EAAO,SAAY,CAC1B,MAAA,EAAsB,IAAI,EAC3B,KAAA,SAAS,QAAQ,KAAK,CAAmB,EAG9C,SAAW,CAAC,EAAK,CAAQ,IAAK,KAAK,iBAAkB,CACjD,MAAM,EAAY,KAAK,wBAAwB,IAAI,CAAQ,EACrD,EAAY,KAAK,kBAAkB,IAAI,CAAG,EAC1C,EAAU,IAAI,QAAQ,EAAK,CAC7B,UAAA,EACA,MAAO,EACP,YAAa,aAAA,CAChB,EACD,MAAM,QAAQ,IAAI,KAAK,SAAS,UAAU,CACtC,OAAQ,CAAE,SAAA,CAAS,EACnB,QAAA,EACA,MAAA,CACH,CAAA,CAAC,CACN,CACM,KAAA,CAAE,YAAA,EAAa,eAAA,CAAmB,EAAA,EAIjC,MAAA,CAAE,YAAA,EAAa,eAAA,EAAe,CACxC,CACL,CAWA,SAAS,EAAO,CAGL,OAAA,EAAU,EAAO,SAAY,CAChC,MAAM,EAAQ,MAAM,KAAK,OAAO,KAAK,KAAK,SAAS,SAAS,EACtD,EAA0B,MAAM,EAAM,OACtC,EAAoB,IAAI,IAAI,KAAK,iBAAiB,QAAQ,EAC1D,EAAc,CAAA,EACpB,UAAW,KAAW,EACb,EAAkB,IAAI,EAAQ,GAAG,IAC5B,MAAA,EAAM,OAAO,CAAO,EACd,EAAA,KAAK,EAAQ,GAAG,GAMpC,MAAO,CAAE,YAAA,CAAY,CAAA,CACxB,CACL,CAOA,oBAAqB,CACjB,OAAO,KAAK,gBAChB,CAOA,eAAgB,CACZ,MAAO,CAAC,GAAG,KAAK,iBAAiB,KAAM,CAAA,CAC3C,CAUA,kBAAkB,EAAK,CACnB,MAAM,EAAY,IAAI,IAAI,EAAK,SAAS,IAAI,EAC5C,OAAO,KAAK,iBAAiB,IAAI,EAAU,IAAI,CACnD,CAMA,wBAAwB,EAAU,CACvB,OAAA,KAAK,wBAAwB,IAAI,CAAQ,CACpD,CAmBA,MAAM,cAAc,EAAS,CACzB,MAAM,EAAM,aAAmB,QAAU,EAAQ,IAAM,EACjD,EAAW,KAAK,kBAAkB,CAAG,EAC3C,GAAI,EAEO,OADO,MAAM,KAAK,OAAO,KAAK,KAAK,SAAS,SAAS,GAC/C,MAAM,CAAQ,CAGnC,CASA,wBAAwB,EAAK,CACnB,MAAA,EAAW,KAAK,kBAAkB,CAAG,EAC3C,GAAI,CAAC,EACD,MAAM,IAAI,EAAa,oBAAqB,CAAE,IAAA,CAAK,CAAA,EAEvD,OAAQ,IACI,EAAA,QAAU,IAAI,QAAQ,CAAG,EACjC,EAAQ,OAAS,OAAO,OAAO,CAAE,SAAA,GAAY,EAAQ,MAAM,EACpD,KAAK,SAAS,OAAO,CAAO,EAE3C,CACJ,CCzRA,IAAI,EAKG,MAAM,EAAgC,KACpC,IACD,EAAqB,IAAI,GAEtB,GChBX,GAAI,CACA,KAAK,uBAAuB,GAAK,GACrC,MACU,CAAA,CCWH,MAAM,EAAgB,MCAhB,EAAoB,GACzB,GAAW,OAAO,GAAY,SASvB,EAWA,CAAE,OAAQ,GCjBzB,MAAM,CAAM,CAYR,YAAY,EAAO,EAAS,EAAS,EAAe,CAc3C,KAAA,QAAU,EAAiB,CAAO,EACvC,KAAK,MAAQ,EACb,KAAK,OAAS,CAClB,CAMA,gBAAgB,EAAS,CAChB,KAAA,aAAe,EAAiB,CAAO,CAChD,CACJ,CCpCA,MAAM,UAAoB,CAAM,CAc5B,YAAY,EAAQ,EAAS,EAAQ,CASjC,MAAM,EAAQ,CAAC,CAAE,IAAA,KAAU,CACvB,MAAM,EAAS,EAAO,KAAK,EAAI,IAAI,EAEnC,GAAK,GAOD,EAAA,EAAI,SAAW,SAAS,QAAU,EAAO,QAAU,GAYhD,OAAA,EAAO,MAAM,CAAC,CAAA,EAEnB,MAAA,EAAO,EAAS,CAAM,CAChC,CACJ,CCxCA,MAAM,CAAO,CAIT,aAAc,CACL,KAAA,YAAc,IACd,KAAA,uBAAyB,GAClC,CAMA,IAAI,QAAS,CACT,OAAO,KAAK,OAChB,CAKA,kBAAmB,CAEV,KAAA,iBAAiB,QAAW,GAAU,CACjC,KAAA,CAAE,QAAA,CAAY,EAAA,EACd,EAAkB,KAAK,cAAc,CAAE,QAAA,EAAS,MAAA,EAAO,EACzD,GACA,EAAM,YAAY,CAAe,CACrC,CACF,CACN,CAuBA,kBAAmB,CAEV,KAAA,iBAAiB,UAAa,GAAU,CAGzC,GAAI,EAAM,MAAQ,EAAM,KAAK,OAAS,aAAc,CAE1C,KAAA,CAAE,QAAA,CAAQ,EAAI,EAAM,KAIpB,EAAkB,QAAQ,IAAI,EAAQ,YAAY,IAAK,GAAU,CAC/D,OAAO,GAAU,WACjB,EAAQ,CAAC,CAAK,GAElB,MAAM,EAAU,IAAI,QAAQ,GAAG,CAAK,EACpC,OAAO,KAAK,cAAc,CAAE,QAAA,EAAS,MAAA,CAAO,CAAA,CAI/C,CAAA,CAAC,EACF,EAAM,UAAU,CAAe,EAE3B,EAAM,OAAS,EAAM,MAAM,CAAC,GACvB,EAAgB,KAAK,IAAM,EAAM,MAAM,CAAC,EAAE,YAAY,EAAI,CAAC,CAExE,CAAA,CACF,CACN,CAaA,cAAc,CAAE,QAAA,EAAS,MAAA,GAAU,CAS/B,MAAM,EAAM,IAAI,IAAI,EAAQ,IAAK,SAAS,IAAI,EAC9C,GAAI,CAAC,EAAI,SAAS,WAAW,MAAM,EAI/B,OAEE,MAAA,EAAa,EAAI,SAAW,SAAS,OACrC,CAAE,OAAA,EAAQ,MAAA,GAAU,KAAK,kBAAkB,CAC7C,MAAA,EACA,QAAA,EACA,WAAA,EACA,IAAA,CAAA,CACH,EACG,IAAA,EAAU,GAAS,EAAM,QAe7B,MAAM,EAAS,EAAQ,OAQvB,GAPI,CAAC,GAAW,KAAK,mBAAmB,IAAI,CAAM,IAKpC,EAAA,KAAK,mBAAmB,IAAI,CAAM,GAE5C,CAAC,EAMD,OAkBA,IAAA,EACA,GAAA,CACA,EAAkB,EAAQ,OAAO,CAAE,IAAA,EAAK,QAAA,EAAS,MAAA,EAAO,OAAA,EAAQ,QAE7D,EAAK,CACU,EAAA,QAAQ,OAAO,CAAG,CACxC,CAEM,MAAA,EAAe,GAAS,EAAM,aACpC,OAAI,aAA2B,UAC1B,KAAK,eAAiB,KACL,EAAA,EAAgB,MAAM,MAAO,GAAQ,CAEnD,GAAI,EAUI,GAAA,CACO,OAAA,MAAM,EAAa,OAAO,CAAE,IAAA,EAAK,QAAA,EAAS,MAAA,EAAO,OAAA,EAAQ,QAE7D,EAAU,CACT,aAAoB,QACd,EAAA,EAEd,CAEJ,GAAI,KAAK,cAUL,OAAO,KAAK,cAAc,OAAO,CAAE,IAAA,EAAK,QAAA,EAAS,MAAA,EAAO,EAEtD,MAAA,CAAA,CACT,GAEE,CACX,CAgBA,kBAAkB,CAAE,IAAA,EAAK,WAAA,EAAY,QAAA,EAAS,MAAA,GAAU,CACpD,MAAM,EAAS,KAAK,QAAQ,IAAI,EAAQ,MAAM,GAAK,GACnD,UAAW,KAAS,EAAQ,CACpB,IAAA,EAGE,MAAA,EAAc,EAAM,MAAM,CAAE,IAAA,EAAK,WAAA,EAAY,QAAA,EAAS,MAAA,EAAO,EACnE,GAAI,EAYS,OAAA,EAAA,GACL,MAAM,QAAQ,CAAM,GAAK,EAAO,SAAW,GAItC,EAAY,cAAgB,QACjC,OAAO,KAAK,CAAW,EAAE,SAAW,GAI/B,OAAO,GAAgB,aAInB,EAAA,QAGN,CAAE,MAAA,EAAO,OAAA,EAExB,CAEA,MAAO,EACX,CAeA,kBAAkB,EAAS,EAAS,EAAe,CAC/C,KAAK,mBAAmB,IAAI,EAAQ,EAAiB,CAAO,CAAC,CACjE,CAQA,gBAAgB,EAAS,CAChB,KAAA,cAAgB,EAAiB,CAAO,CACjD,CAMA,cAAc,EAAO,CAiCZ,KAAK,QAAQ,IAAI,EAAM,MAAM,GAC9B,KAAK,QAAQ,IAAI,EAAM,OAAQ,CAAE,CAAA,EAIrC,KAAK,QAAQ,IAAI,EAAM,MAAM,EAAE,KAAK,CAAK,CAC7C,CAMA,gBAAgB,EAAO,CACnB,GAAI,CAAC,KAAK,QAAQ,IAAI,EAAM,MAAM,EACxB,MAAA,IAAI,EAAa,6CAA8C,CACjE,OAAQ,EAAM,MAAA,CACjB,EAEC,MAAA,EAAa,KAAK,QAAQ,IAAI,EAAM,MAAM,EAAE,QAAQ,CAAK,EAC/D,GAAI,EAAa,GACb,KAAK,QAAQ,IAAI,EAAM,MAAM,EAAE,OAAO,EAAY,CAAC,MAG7C,OAAA,IAAI,EAAa,uCAAuC,CAEtE,CACJ,CC9XA,IAAI,EAQG,MAAM,EAA2B,KAC/B,IACD,EAAgB,IAAI,EAEpB,EAAc,iBAAgB,EAC9B,EAAc,iBAAgB,GAE3B,GCOX,SAAS,EAAc,EAAS,EAAS,EAAQ,CACzC,IAAA,EACA,GAAA,OAAO,GAAY,SAAU,CAC7B,MAAM,EAAa,IAAI,IAAI,EAAS,SAAS,IAAI,EAsB3C,EAAgB,CAAC,CAAE,IAAA,KASd,EAAI,OAAS,EAAW,KAGnC,EAAQ,IAAI,EAAM,EAAe,EAAS,CAAM,CAAA,SAE3C,aAAmB,OAExB,EAAQ,IAAI,EAAY,EAAS,EAAS,CAAM,UAE3C,OAAO,GAAY,WAExB,EAAQ,IAAI,EAAM,EAAS,EAAS,CAAM,UAErC,aAAmB,EAChB,EAAA,MAGF,OAAA,IAAI,EAAa,yBAA0B,CAC7C,WAAY,kBACZ,SAAU,gBACV,UAAW,SAAA,CACd,EAGL,OADsB,IACR,cAAc,CAAK,EAC1B,CACX,CCvEO,SAAS,GAA0B,EAAW,EAA8B,GAAI,CAGnF,UAAW,IAAa,CAAC,GAAG,EAAU,aAAa,KAAI,CAAE,EACjD,EAA4B,KAAM,GAAW,EAAO,KAAK,CAAS,CAAC,GACnE,EAAU,aAAa,OAAO,CAAS,EAG/C,OAAO,CACX,CCVO,SAAU,GAAsB,EAAK,CAAE,4BAAA,EAA8B,CAAC,QAAS,UAAU,EAAG,eAAA,EAAiB,aAAc,UAAA,EAAY,GAAM,gBAAA,CAAe,EAAM,CAAA,EAAI,CACzK,MAAM,EAAY,IAAI,IAAI,EAAK,SAAS,IAAI,EAC5C,EAAU,KAAO,GACjB,MAAM,EAAU,KAChB,MAAM,EAA0B,GAA0B,EAAW,CAA2B,EAEhG,GADA,MAAM,EAAwB,KAC1B,GAAkB,EAAwB,SAAS,SAAS,GAAG,EAAG,CAClE,MAAM,EAAe,IAAI,IAAI,EAAwB,IAAI,EACzD,EAAa,UAAY,EACzB,MAAM,EAAa,IACtB,CACD,GAAI,EAAW,CACX,MAAM,EAAW,IAAI,IAAI,EAAwB,IAAI,EACrD,EAAS,UAAY,QACrB,MAAM,EAAS,IAClB,CACD,GAAI,EAAiB,CACjB,MAAM,EAAiB,EAAgB,CAAE,IAAK,CAAW,CAAA,EACzD,UAAW,KAAgB,EACvB,MAAM,EAAa,IAE1B,CACL,CCpBA,MAAM,WAAsB,CAAM,CAiB9B,YAAY,EAAoB,EAAS,CACrC,MAAM,EAAQ,CAAC,CAAE,QAAA,KAAe,CACtB,MAAA,EAAkB,EAAmB,qBAC3C,UAAW,KAAe,GAAsB,EAAQ,IAAK,CAAO,EAAG,CAC7D,MAAA,EAAW,EAAgB,IAAI,CAAW,EAChD,GAAI,EAAU,CACJ,MAAA,EAAY,EAAmB,wBAAwB,CAAQ,EAC9D,MAAA,CAAE,SAAA,EAAU,UAAA,EACvB,CACJ,CAIA,EAEE,MAAA,EAAO,EAAmB,QAAQ,CAC5C,CACJ,CC9BA,SAAS,GAAS,EAAS,CACvB,MAAM,EAAqB,IACrB,EAAgB,IAAI,GAAc,EAAoB,CAAO,EACnE,EAAc,CAAa,CAC/B,CCrBA,MAAM,GAAoB,aAmBpB,GAAuB,MAAO,EAAqB,EAAkB,KAAsB,CAE7F,MAAM,GADa,MAAM,KAAK,OAAO,KAAI,GACH,OAAQ,GAClC,EAAU,SAAS,CAAe,GACtC,EAAU,SAAS,KAAK,aAAa,KAAK,GAC1C,IAAc,CACrB,EACD,aAAM,QAAQ,IAAI,EAAmB,IAAK,GAAc,KAAK,OAAO,OAAO,CAAS,CAAC,CAAC,EAC/E,CACX,ECnBA,SAAS,IAAwB,CAExB,KAAA,iBAAiB,WAAc,GAAU,CACpC,MAAA,EAAY,EAAW,kBAC7B,EAAM,UAAU,GAAqB,CAAS,EAAE,KAAM,GAAkB,CAOvE,CAAA,CAAC,CAAA,CACJ,CACN,CCFA,SAAS,GAAS,EAAS,CACI,IACR,SAAS,CAAO,CACvC,CCPA,SAAS,GAAiB,EAAS,EAAS,CACxC,GAAS,CAAO,EAChB,GAAS,CAAO,CACpB,CCzBA,GAAI,CACA,KAAK,kCAAkC,GAAK,GAChD,MACU,CAAA,CCSV,SAAS,GAAc,CACnB,MAAO,GAAQ,KAAK,cAAgB,KAAK,aAAa,kBAC1D,CCIA,SAAS,GAAO,EAAa,CACrB,KACK,KAAA,iBAAiB,WAAa,GAAU,CACzC,EAAM,UAAU,KAAK,aAAa,kBAAkB,OAAO,EAAE,KAAK,IAAM,CAQvE,CAAA,CAAC,CAAA,CACL,CAOT,CCzBA,SAAS,IAAe,CACpB,KAAK,iBAAiB,WAAY,IAAM,KAAK,QAAQ,MAAK,CAAE,CAChE,CCZA,MAAM,EAAQ,WACR,GAAU,ybAAK,cACf,EAAsB,UAE5B,KAAK,YAAa,EAClB,GAAc,EAEd,GAAuB,EACvB,GAAiB,EAAO,EAExB,KAAK,iBAAiB,UAAW,MAAO,GAAU,CAChD,EAAM,UAAU,OAAO,KAAK,CAAK,EAAE,KAAM,GAAU,EAAM,IAAI,CAAmB,CAAC,CAAC,CACpF,CAAC,EAEG,KACF,GAA0B,EAG5B,KAAK,iBAAiB,QAAU,GAAU,CACpC,EAAM,QAAQ,OAAS,YACzB,EAAM,aACH,SAAY,CACX,GAAI,CACF,MAAM,EAAc,MAAM,EAAM,gBAEhC,OAAI,GAIgB,MAAM,MAAM,EAAM,OAAO,CAE9C,MAAe,CAGd,OADmB,MADL,MAAM,OAAO,KAAK,CAAK,GACN,MAAM,CAAmB,CAEzD,CACT,GAAU,CACL,CAEL,CAAC,EAQD,SAAS,GAAiB,EAAM,CAC9B,OAAO,KAAK,aAAa,iBAAiB,EAAK,MAAO,CAAI,CAC5D,CAEA,KAAK,iBAAiB,OAAS,GAAU,CACjC,KAAK,cAAgB,KAAK,aAAa,aAAe,WAKxD,EAAM,MACR,EAAM,UAAU,GAAiB,EAAM,KAAK,KAAI,CAAE,CAAC,CAEvD,CAAC,EAED,KAAK,iBAAiB,oBAAsB,GAAU,CACpD,MAAM,EAAsB,EAAM,aAElC,IAAI,EAAM,KAIR,EAAM,EAAoB,QAAQ,CAAC,EAAE,OAKvC,MAAM,EAAe,KAAK,QACvB,SAAS,CACR,KAAM,SACN,oBAAqB,EAC3B,CAAK,EACA,KAAM,GAAkB,CACvB,IAAI,EAAiB,KAErB,QAAS,EAAI,EAAG,EAAI,EAAc,OAAQ,IAAK,CAC7C,MAAM,EAAe,EAAc,CAAC,EAEpC,GAAI,EAAa,MAAQ,EAAK,CAC5B,EAAiB,EACjB,KACD,CACF,CAED,OAAI,EACK,EAAe,MAAO,EAEtB,KAAK,QAAQ,WAAW,CAAG,CAE1C,CAAK,EAEH,EAAM,UAAU,CAAY,EAC5B,EAAoB,MAAO,CAC7B,CAAC","file":"worker.js","sourcesContent":["\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:core:7.0.0'] && _();\n}\ncatch (e) { }\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { messages } from './messages.js';\nimport '../../_version.js';\nconst fallback = (code, ...args) => {\n    let msg = code;\n    if (args.length > 0) {\n        msg += ` :: ${JSON.stringify(args)}`;\n    }\n    return msg;\n};\nconst generatorFunction = (code, details = {}) => {\n    const message = messages[code];\n    if (!message) {\n        throw new Error(`Unable to find message for code '${code}'.`);\n    }\n    return message(details);\n};\nexport const messageGenerator = process.env.NODE_ENV === 'production' ? fallback : generatorFunction;\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { messageGenerator } from '../models/messages/messageGenerator.js';\nimport '../_version.js';\n/**\n * Workbox errors should be thrown with this class.\n * This allows use to ensure the type easily in tests,\n * helps developers identify errors from workbox\n * easily and allows use to optimise error\n * messages correctly.\n *\n * @private\n */\nclass WorkboxError extends Error {\n    /**\n     *\n     * @param {string} errorCode The error code that\n     * identifies this particular error.\n     * @param {Object=} details Any relevant arguments\n     * that will help developers identify issues should\n     * be added as a key on the context object.\n     */\n    constructor(errorCode, details) {\n        const message = messageGenerator(errorCode, details);\n        super(message);\n        this.name = errorCode;\n        this.details = details;\n    }\n}\nexport { WorkboxError };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nconst _cacheNameDetails = {\n    googleAnalytics: 'googleAnalytics',\n    precache: 'precache-v2',\n    prefix: 'workbox',\n    runtime: 'runtime',\n    suffix: typeof registration !== 'undefined' ? registration.scope : '',\n};\nconst _createCacheName = (cacheName) => {\n    return [_cacheNameDetails.prefix, cacheName, _cacheNameDetails.suffix]\n        .filter((value) => value && value.length > 0)\n        .join('-');\n};\nconst eachCacheNameDetail = (fn) => {\n    for (const key of Object.keys(_cacheNameDetails)) {\n        fn(key);\n    }\n};\nexport const cacheNames = {\n    updateDetails: (details) => {\n        eachCacheNameDetail((key) => {\n            if (typeof details[key] === 'string') {\n                _cacheNameDetails[key] = details[key];\n            }\n        });\n    },\n    getGoogleAnalyticsName: (userCacheName) => {\n        return userCacheName || _createCacheName(_cacheNameDetails.googleAnalytics);\n    },\n    getPrecacheName: (userCacheName) => {\n        return userCacheName || _createCacheName(_cacheNameDetails.precache);\n    },\n    getPrefix: () => {\n        return _cacheNameDetails.prefix;\n    },\n    getRuntimeName: (userCacheName) => {\n        return userCacheName || _createCacheName(_cacheNameDetails.runtime);\n    },\n    getSuffix: () => {\n        return _cacheNameDetails.suffix;\n    },\n};\n","/*\n  Copyright 2020 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * A utility method that makes it easier to use `event.waitUntil` with\n * async functions and return the result.\n *\n * @param {ExtendableEvent} event\n * @param {Function} asyncFn\n * @return {Function}\n * @private\n */\nfunction waitUntil(event, asyncFn) {\n    const returnPromise = asyncFn();\n    event.waitUntil(returnPromise);\n    return returnPromise;\n}\nexport { waitUntil };\n","\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:precaching:7.0.0'] && _();\n}\ncatch (e) { }\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport '../_version.js';\n// Name of the search parameter used to store revision info.\nconst REVISION_SEARCH_PARAM = '__WB_REVISION__';\n/**\n * Converts a manifest entry into a versioned URL suitable for precaching.\n *\n * @param {Object|string} entry\n * @return {string} A URL with versioning info.\n *\n * @private\n * @memberof workbox-precaching\n */\nexport function createCacheKey(entry) {\n    if (!entry) {\n        throw new WorkboxError('add-to-cache-list-unexpected-type', { entry });\n    }\n    // If a precache manifest entry is a string, it's assumed to be a versioned\n    // URL, like '/app.abcd1234.js'. Return as-is.\n    if (typeof entry === 'string') {\n        const urlObject = new URL(entry, location.href);\n        return {\n            cacheKey: urlObject.href,\n            url: urlObject.href,\n        };\n    }\n    const { revision, url } = entry;\n    if (!url) {\n        throw new WorkboxError('add-to-cache-list-unexpected-type', { entry });\n    }\n    // If there's just a URL and no revision, then it's also assumed to be a\n    // versioned URL.\n    if (!revision) {\n        const urlObject = new URL(url, location.href);\n        return {\n            cacheKey: urlObject.href,\n            url: urlObject.href,\n        };\n    }\n    // Otherwise, construct a properly versioned URL using the custom Workbox\n    // search parameter along with the revision info.\n    const cacheKeyURL = new URL(url, location.href);\n    const originalURL = new URL(url, location.href);\n    cacheKeyURL.searchParams.set(REVISION_SEARCH_PARAM, revision);\n    return {\n        cacheKey: cacheKeyURL.href,\n        url: originalURL.href,\n    };\n}\n","/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * A plugin, designed to be used with PrecacheController, to determine the\n * of assets that were updated (or not updated) during the install event.\n *\n * @private\n */\nclass PrecacheInstallReportPlugin {\n    constructor() {\n        this.updatedURLs = [];\n        this.notUpdatedURLs = [];\n        this.handlerWillStart = async ({ request, state, }) => {\n            // TODO: `state` should never be undefined...\n            if (state) {\n                state.originalRequest = request;\n            }\n        };\n        this.cachedResponseWillBeUsed = async ({ event, state, cachedResponse, }) => {\n            if (event.type === 'install') {\n                if (state &&\n                    state.originalRequest &&\n                    state.originalRequest instanceof Request) {\n                    // TODO: `state` should never be undefined...\n                    const url = state.originalRequest.url;\n                    if (cachedResponse) {\n                        this.notUpdatedURLs.push(url);\n                    }\n                    else {\n                        this.updatedURLs.push(url);\n                    }\n                }\n            }\n            return cachedResponse;\n        };\n    }\n}\nexport { PrecacheInstallReportPlugin };\n","/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * A plugin, designed to be used with PrecacheController, to translate URLs into\n * the corresponding cache key, based on the current revision info.\n *\n * @private\n */\nclass PrecacheCacheKeyPlugin {\n    constructor({ precacheController }) {\n        this.cacheKeyWillBeUsed = async ({ request, params, }) => {\n            // Params is type any, can't change right now.\n            /* eslint-disable */\n            const cacheKey = (params === null || params === void 0 ? void 0 : params.cacheKey) ||\n                this._precacheController.getCacheKeyForURL(request.url);\n            /* eslint-enable */\n            return cacheKey\n                ? new Request(cacheKey, { headers: request.headers })\n                : request;\n        };\n        this._precacheController = precacheController;\n    }\n}\nexport { PrecacheCacheKeyPlugin };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nlet supportStatus;\n/**\n * A utility function that determines whether the current browser supports\n * constructing a new `Response` from a `response.body` stream.\n *\n * @return {boolean} `true`, if the current browser can successfully\n *     construct a `Response` from a `response.body` stream, `false` otherwise.\n *\n * @private\n */\nfunction canConstructResponseFromBodyStream() {\n    if (supportStatus === undefined) {\n        const testResponse = new Response('');\n        if ('body' in testResponse) {\n            try {\n                new Response(testResponse.body);\n                supportStatus = true;\n            }\n            catch (error) {\n                supportStatus = false;\n            }\n        }\n        supportStatus = false;\n    }\n    return supportStatus;\n}\nexport { canConstructResponseFromBodyStream };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { canConstructResponseFromBodyStream } from './_private/canConstructResponseFromBodyStream.js';\nimport { WorkboxError } from './_private/WorkboxError.js';\nimport './_version.js';\n/**\n * Allows developers to copy a response and modify its `headers`, `status`,\n * or `statusText` values (the values settable via a\n * [`ResponseInit`]{@link https://developer.mozilla.org/en-US/docs/Web/API/Response/Response#Syntax}\n * object in the constructor).\n * To modify these values, pass a function as the second argument. That\n * function will be invoked with a single object with the response properties\n * `{headers, status, statusText}`. The return value of this function will\n * be used as the `ResponseInit` for the new `Response`. To change the values\n * either modify the passed parameter(s) and return it, or return a totally\n * new object.\n *\n * This method is intentionally limited to same-origin responses, regardless of\n * whether CORS was used or not.\n *\n * @param {Response} response\n * @param {Function} modifier\n * @memberof workbox-core\n */\nasync function copyResponse(response, modifier) {\n    let origin = null;\n    // If response.url isn't set, assume it's cross-origin and keep origin null.\n    if (response.url) {\n        const responseURL = new URL(response.url);\n        origin = responseURL.origin;\n    }\n    if (origin !== self.location.origin) {\n        throw new WorkboxError('cross-origin-copy-response', { origin });\n    }\n    const clonedResponse = response.clone();\n    // Create a fresh `ResponseInit` object by cloning the headers.\n    const responseInit = {\n        headers: new Headers(clonedResponse.headers),\n        status: clonedResponse.status,\n        statusText: clonedResponse.statusText,\n    };\n    // Apply any user modifications.\n    const modifiedResponseInit = modifier ? modifier(responseInit) : responseInit;\n    // Create the new response from the body stream and `ResponseInit`\n    // modifications. Note: not all browsers support the Response.body stream,\n    // so fall back to reading the entire body into memory as a blob.\n    const body = canConstructResponseFromBodyStream()\n        ? clonedResponse.body\n        : await clonedResponse.blob();\n    return new Response(body, modifiedResponseInit);\n}\nexport { copyResponse };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nconst getFriendlyURL = (url) => {\n    const urlObj = new URL(String(url), location.href);\n    // See https://github.com/GoogleChrome/workbox/issues/2323\n    // We want to include everything, except for the origin if it's same-origin.\n    return urlObj.href.replace(new RegExp(`^${location.origin}`), '');\n};\nexport { getFriendlyURL };\n","/*\n  Copyright 2020 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nfunction stripParams(fullURL, ignoreParams) {\n    const strippedURL = new URL(fullURL);\n    for (const param of ignoreParams) {\n        strippedURL.searchParams.delete(param);\n    }\n    return strippedURL.href;\n}\n/**\n * Matches an item in the cache, ignoring specific URL params. This is similar\n * to the `ignoreSearch` option, but it allows you to ignore just specific\n * params (while continuing to match on the others).\n *\n * @private\n * @param {Cache} cache\n * @param {Request} request\n * @param {Object} matchOptions\n * @param {Array<string>} ignoreParams\n * @return {Promise<Response|undefined>}\n */\nasync function cacheMatchIgnoreParams(cache, request, ignoreParams, matchOptions) {\n    const strippedRequestURL = stripParams(request.url, ignoreParams);\n    // If the request doesn't include any ignored params, match as normal.\n    if (request.url === strippedRequestURL) {\n        return cache.match(request, matchOptions);\n    }\n    // Otherwise, match by comparing keys\n    const keysOptions = Object.assign(Object.assign({}, matchOptions), { ignoreSearch: true });\n    const cacheKeys = await cache.keys(request, keysOptions);\n    for (const cacheKey of cacheKeys) {\n        const strippedCacheKeyURL = stripParams(cacheKey.url, ignoreParams);\n        if (strippedRequestURL === strippedCacheKeyURL) {\n            return cache.match(cacheKey, matchOptions);\n        }\n    }\n    return;\n}\nexport { cacheMatchIgnoreParams };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * The Deferred class composes Promises in a way that allows for them to be\n * resolved or rejected from outside the constructor. In most cases promises\n * should be used directly, but Deferreds can be necessary when the logic to\n * resolve a promise must be separate.\n *\n * @private\n */\nclass Deferred {\n    /**\n     * Creates a promise and exposes its resolve and reject functions as methods.\n     */\n    constructor() {\n        this.promise = new Promise((resolve, reject) => {\n            this.resolve = resolve;\n            this.reject = reject;\n        });\n    }\n}\nexport { Deferred };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n// Callbacks to be executed whenever there's a quota error.\n// Can't change Function type right now.\n// eslint-disable-next-line @typescript-eslint/ban-types\nconst quotaErrorCallbacks = new Set();\nexport { quotaErrorCallbacks };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { logger } from '../_private/logger.js';\nimport { quotaErrorCallbacks } from '../models/quotaErrorCallbacks.js';\nimport '../_version.js';\n/**\n * Runs all of the callback functions, one at a time sequentially, in the order\n * in which they were registered.\n *\n * @memberof workbox-core\n * @private\n */\nasync function executeQuotaErrorCallbacks() {\n    if (process.env.NODE_ENV !== 'production') {\n        logger.log(`About to run ${quotaErrorCallbacks.size} ` +\n            `callbacks to clean up caches.`);\n    }\n    for (const callback of quotaErrorCallbacks) {\n        await callback();\n        if (process.env.NODE_ENV !== 'production') {\n            logger.log(callback, 'is complete.');\n        }\n    }\n    if (process.env.NODE_ENV !== 'production') {\n        logger.log('Finished running callbacks.');\n    }\n}\nexport { executeQuotaErrorCallbacks };\n","/*\n  Copyright 2019 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * Returns a promise that resolves and the passed number of milliseconds.\n * This utility is an async/await-friendly version of `setTimeout`.\n *\n * @param {number} ms\n * @return {Promise}\n * @private\n */\nexport function timeout(ms) {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n}\n","\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:strategies:7.0.0'] && _();\n}\ncatch (e) { }\n","/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { cacheMatchIgnoreParams } from 'workbox-core/_private/cacheMatchIgnoreParams.js';\nimport { Deferred } from 'workbox-core/_private/Deferred.js';\nimport { executeQuotaErrorCallbacks } from 'workbox-core/_private/executeQuotaErrorCallbacks.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { timeout } from 'workbox-core/_private/timeout.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport './_version.js';\nfunction toRequest(input) {\n    return typeof input === 'string' ? new Request(input) : input;\n}\n/**\n * A class created every time a Strategy instance instance calls\n * {@link workbox-strategies.Strategy~handle} or\n * {@link workbox-strategies.Strategy~handleAll} that wraps all fetch and\n * cache actions around plugin callbacks and keeps track of when the strategy\n * is \"done\" (i.e. all added `event.waitUntil()` promises have resolved).\n *\n * @memberof workbox-strategies\n */\nclass StrategyHandler {\n    /**\n     * Creates a new instance associated with the passed strategy and event\n     * that's handling the request.\n     *\n     * The constructor also initializes the state that will be passed to each of\n     * the plugins handling this request.\n     *\n     * @param {workbox-strategies.Strategy} strategy\n     * @param {Object} options\n     * @param {Request|string} options.request A request to run this strategy for.\n     * @param {ExtendableEvent} options.event The event associated with the\n     *     request.\n     * @param {URL} [options.url]\n     * @param {*} [options.params] The return value from the\n     *     {@link workbox-routing~matchCallback} (if applicable).\n     */\n    constructor(strategy, options) {\n        this._cacheKeys = {};\n        /**\n         * The request the strategy is performing (passed to the strategy's\n         * `handle()` or `handleAll()` method).\n         * @name request\n         * @instance\n         * @type {Request}\n         * @memberof workbox-strategies.StrategyHandler\n         */\n        /**\n         * The event associated with this request.\n         * @name event\n         * @instance\n         * @type {ExtendableEvent}\n         * @memberof workbox-strategies.StrategyHandler\n         */\n        /**\n         * A `URL` instance of `request.url` (if passed to the strategy's\n         * `handle()` or `handleAll()` method).\n         * Note: the `url` param will be present if the strategy was invoked\n         * from a workbox `Route` object.\n         * @name url\n         * @instance\n         * @type {URL|undefined}\n         * @memberof workbox-strategies.StrategyHandler\n         */\n        /**\n         * A `param` value (if passed to the strategy's\n         * `handle()` or `handleAll()` method).\n         * Note: the `param` param will be present if the strategy was invoked\n         * from a workbox `Route` object and the\n         * {@link workbox-routing~matchCallback} returned\n         * a truthy value (it will be that value).\n         * @name params\n         * @instance\n         * @type {*|undefined}\n         * @memberof workbox-strategies.StrategyHandler\n         */\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(options.event, ExtendableEvent, {\n                moduleName: 'workbox-strategies',\n                className: 'StrategyHandler',\n                funcName: 'constructor',\n                paramName: 'options.event',\n            });\n        }\n        Object.assign(this, options);\n        this.event = options.event;\n        this._strategy = strategy;\n        this._handlerDeferred = new Deferred();\n        this._extendLifetimePromises = [];\n        // Copy the plugins list (since it's mutable on the strategy),\n        // so any mutations don't affect this handler instance.\n        this._plugins = [...strategy.plugins];\n        this._pluginStateMap = new Map();\n        for (const plugin of this._plugins) {\n            this._pluginStateMap.set(plugin, {});\n        }\n        this.event.waitUntil(this._handlerDeferred.promise);\n    }\n    /**\n     * Fetches a given request (and invokes any applicable plugin callback\n     * methods) using the `fetchOptions` (for non-navigation requests) and\n     * `plugins` defined on the `Strategy` object.\n     *\n     * The following plugin lifecycle methods are invoked when using this method:\n     * - `requestWillFetch()`\n     * - `fetchDidSucceed()`\n     * - `fetchDidFail()`\n     *\n     * @param {Request|string} input The URL or request to fetch.\n     * @return {Promise<Response>}\n     */\n    async fetch(input) {\n        const { event } = this;\n        let request = toRequest(input);\n        if (request.mode === 'navigate' &&\n            event instanceof FetchEvent &&\n            event.preloadResponse) {\n            const possiblePreloadResponse = (await event.preloadResponse);\n            if (possiblePreloadResponse) {\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.log(`Using a preloaded navigation response for ` +\n                        `'${getFriendlyURL(request.url)}'`);\n                }\n                return possiblePreloadResponse;\n            }\n        }\n        // If there is a fetchDidFail plugin, we need to save a clone of the\n        // original request before it's either modified by a requestWillFetch\n        // plugin or before the original request's body is consumed via fetch().\n        const originalRequest = this.hasCallback('fetchDidFail')\n            ? request.clone()\n            : null;\n        try {\n            for (const cb of this.iterateCallbacks('requestWillFetch')) {\n                request = await cb({ request: request.clone(), event });\n            }\n        }\n        catch (err) {\n            if (err instanceof Error) {\n                throw new WorkboxError('plugin-error-request-will-fetch', {\n                    thrownErrorMessage: err.message,\n                });\n            }\n        }\n        // The request can be altered by plugins with `requestWillFetch` making\n        // the original request (most likely from a `fetch` event) different\n        // from the Request we make. Pass both to `fetchDidFail` to aid debugging.\n        const pluginFilteredRequest = request.clone();\n        try {\n            let fetchResponse;\n            // See https://github.com/GoogleChrome/workbox/issues/1796\n            fetchResponse = await fetch(request, request.mode === 'navigate' ? undefined : this._strategy.fetchOptions);\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`Network request for ` +\n                    `'${getFriendlyURL(request.url)}' returned a response with ` +\n                    `status '${fetchResponse.status}'.`);\n            }\n            for (const callback of this.iterateCallbacks('fetchDidSucceed')) {\n                fetchResponse = await callback({\n                    event,\n                    request: pluginFilteredRequest,\n                    response: fetchResponse,\n                });\n            }\n            return fetchResponse;\n        }\n        catch (error) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.log(`Network request for ` +\n                    `'${getFriendlyURL(request.url)}' threw an error.`, error);\n            }\n            // `originalRequest` will only exist if a `fetchDidFail` callback\n            // is being used (see above).\n            if (originalRequest) {\n                await this.runCallbacks('fetchDidFail', {\n                    error: error,\n                    event,\n                    originalRequest: originalRequest.clone(),\n                    request: pluginFilteredRequest.clone(),\n                });\n            }\n            throw error;\n        }\n    }\n    /**\n     * Calls `this.fetch()` and (in the background) runs `this.cachePut()` on\n     * the response generated by `this.fetch()`.\n     *\n     * The call to `this.cachePut()` automatically invokes `this.waitUntil()`,\n     * so you do not have to manually call `waitUntil()` on the event.\n     *\n     * @param {Request|string} input The request or URL to fetch and cache.\n     * @return {Promise<Response>}\n     */\n    async fetchAndCachePut(input) {\n        const response = await this.fetch(input);\n        const responseClone = response.clone();\n        void this.waitUntil(this.cachePut(input, responseClone));\n        return response;\n    }\n    /**\n     * Matches a request from the cache (and invokes any applicable plugin\n     * callback methods) using the `cacheName`, `matchOptions`, and `plugins`\n     * defined on the strategy object.\n     *\n     * The following plugin lifecycle methods are invoked when using this method:\n     * - cacheKeyWillByUsed()\n     * - cachedResponseWillByUsed()\n     *\n     * @param {Request|string} key The Request or URL to use as the cache key.\n     * @return {Promise<Response|undefined>} A matching response, if found.\n     */\n    async cacheMatch(key) {\n        const request = toRequest(key);\n        let cachedResponse;\n        const { cacheName, matchOptions } = this._strategy;\n        const effectiveRequest = await this.getCacheKey(request, 'read');\n        const multiMatchOptions = Object.assign(Object.assign({}, matchOptions), { cacheName });\n        cachedResponse = await caches.match(effectiveRequest, multiMatchOptions);\n        if (process.env.NODE_ENV !== 'production') {\n            if (cachedResponse) {\n                logger.debug(`Found a cached response in '${cacheName}'.`);\n            }\n            else {\n                logger.debug(`No cached response found in '${cacheName}'.`);\n            }\n        }\n        for (const callback of this.iterateCallbacks('cachedResponseWillBeUsed')) {\n            cachedResponse =\n                (await callback({\n                    cacheName,\n                    matchOptions,\n                    cachedResponse,\n                    request: effectiveRequest,\n                    event: this.event,\n                })) || undefined;\n        }\n        return cachedResponse;\n    }\n    /**\n     * Puts a request/response pair in the cache (and invokes any applicable\n     * plugin callback methods) using the `cacheName` and `plugins` defined on\n     * the strategy object.\n     *\n     * The following plugin lifecycle methods are invoked when using this method:\n     * - cacheKeyWillByUsed()\n     * - cacheWillUpdate()\n     * - cacheDidUpdate()\n     *\n     * @param {Request|string} key The request or URL to use as the cache key.\n     * @param {Response} response The response to cache.\n     * @return {Promise<boolean>} `false` if a cacheWillUpdate caused the response\n     * not be cached, and `true` otherwise.\n     */\n    async cachePut(key, response) {\n        const request = toRequest(key);\n        // Run in the next task to avoid blocking other cache reads.\n        // https://github.com/w3c/ServiceWorker/issues/1397\n        await timeout(0);\n        const effectiveRequest = await this.getCacheKey(request, 'write');\n        if (process.env.NODE_ENV !== 'production') {\n            if (effectiveRequest.method && effectiveRequest.method !== 'GET') {\n                throw new WorkboxError('attempt-to-cache-non-get-request', {\n                    url: getFriendlyURL(effectiveRequest.url),\n                    method: effectiveRequest.method,\n                });\n            }\n            // See https://github.com/GoogleChrome/workbox/issues/2818\n            const vary = response.headers.get('Vary');\n            if (vary) {\n                logger.debug(`The response for ${getFriendlyURL(effectiveRequest.url)} ` +\n                    `has a 'Vary: ${vary}' header. ` +\n                    `Consider setting the {ignoreVary: true} option on your strategy ` +\n                    `to ensure cache matching and deletion works as expected.`);\n            }\n        }\n        if (!response) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.error(`Cannot cache non-existent response for ` +\n                    `'${getFriendlyURL(effectiveRequest.url)}'.`);\n            }\n            throw new WorkboxError('cache-put-with-no-response', {\n                url: getFriendlyURL(effectiveRequest.url),\n            });\n        }\n        const responseToCache = await this._ensureResponseSafeToCache(response);\n        if (!responseToCache) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`Response '${getFriendlyURL(effectiveRequest.url)}' ` +\n                    `will not be cached.`, responseToCache);\n            }\n            return false;\n        }\n        const { cacheName, matchOptions } = this._strategy;\n        const cache = await self.caches.open(cacheName);\n        const hasCacheUpdateCallback = this.hasCallback('cacheDidUpdate');\n        const oldResponse = hasCacheUpdateCallback\n            ? await cacheMatchIgnoreParams(\n            // TODO(philipwalton): the `__WB_REVISION__` param is a precaching\n            // feature. Consider into ways to only add this behavior if using\n            // precaching.\n            cache, effectiveRequest.clone(), ['__WB_REVISION__'], matchOptions)\n            : null;\n        if (process.env.NODE_ENV !== 'production') {\n            logger.debug(`Updating the '${cacheName}' cache with a new Response ` +\n                `for ${getFriendlyURL(effectiveRequest.url)}.`);\n        }\n        try {\n            await cache.put(effectiveRequest, hasCacheUpdateCallback ? responseToCache.clone() : responseToCache);\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                // See https://developer.mozilla.org/en-US/docs/Web/API/DOMException#exception-QuotaExceededError\n                if (error.name === 'QuotaExceededError') {\n                    await executeQuotaErrorCallbacks();\n                }\n                throw error;\n            }\n        }\n        for (const callback of this.iterateCallbacks('cacheDidUpdate')) {\n            await callback({\n                cacheName,\n                oldResponse,\n                newResponse: responseToCache.clone(),\n                request: effectiveRequest,\n                event: this.event,\n            });\n        }\n        return true;\n    }\n    /**\n     * Checks the list of plugins for the `cacheKeyWillBeUsed` callback, and\n     * executes any of those callbacks found in sequence. The final `Request`\n     * object returned by the last plugin is treated as the cache key for cache\n     * reads and/or writes. If no `cacheKeyWillBeUsed` plugin callbacks have\n     * been registered, the passed request is returned unmodified\n     *\n     * @param {Request} request\n     * @param {string} mode\n     * @return {Promise<Request>}\n     */\n    async getCacheKey(request, mode) {\n        const key = `${request.url} | ${mode}`;\n        if (!this._cacheKeys[key]) {\n            let effectiveRequest = request;\n            for (const callback of this.iterateCallbacks('cacheKeyWillBeUsed')) {\n                effectiveRequest = toRequest(await callback({\n                    mode,\n                    request: effectiveRequest,\n                    event: this.event,\n                    // params has a type any can't change right now.\n                    params: this.params, // eslint-disable-line\n                }));\n            }\n            this._cacheKeys[key] = effectiveRequest;\n        }\n        return this._cacheKeys[key];\n    }\n    /**\n     * Returns true if the strategy has at least one plugin with the given\n     * callback.\n     *\n     * @param {string} name The name of the callback to check for.\n     * @return {boolean}\n     */\n    hasCallback(name) {\n        for (const plugin of this._strategy.plugins) {\n            if (name in plugin) {\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n     * Runs all plugin callbacks matching the given name, in order, passing the\n     * given param object (merged ith the current plugin state) as the only\n     * argument.\n     *\n     * Note: since this method runs all plugins, it's not suitable for cases\n     * where the return value of a callback needs to be applied prior to calling\n     * the next callback. See\n     * {@link workbox-strategies.StrategyHandler#iterateCallbacks}\n     * below for how to handle that case.\n     *\n     * @param {string} name The name of the callback to run within each plugin.\n     * @param {Object} param The object to pass as the first (and only) param\n     *     when executing each callback. This object will be merged with the\n     *     current plugin state prior to callback execution.\n     */\n    async runCallbacks(name, param) {\n        for (const callback of this.iterateCallbacks(name)) {\n            // TODO(philipwalton): not sure why `any` is needed. It seems like\n            // this should work with `as WorkboxPluginCallbackParam[C]`.\n            await callback(param);\n        }\n    }\n    /**\n     * Accepts a callback and returns an iterable of matching plugin callbacks,\n     * where each callback is wrapped with the current handler state (i.e. when\n     * you call each callback, whatever object parameter you pass it will\n     * be merged with the plugin's current state).\n     *\n     * @param {string} name The name fo the callback to run\n     * @return {Array<Function>}\n     */\n    *iterateCallbacks(name) {\n        for (const plugin of this._strategy.plugins) {\n            if (typeof plugin[name] === 'function') {\n                const state = this._pluginStateMap.get(plugin);\n                const statefulCallback = (param) => {\n                    const statefulParam = Object.assign(Object.assign({}, param), { state });\n                    // TODO(philipwalton): not sure why `any` is needed. It seems like\n                    // this should work with `as WorkboxPluginCallbackParam[C]`.\n                    return plugin[name](statefulParam);\n                };\n                yield statefulCallback;\n            }\n        }\n    }\n    /**\n     * Adds a promise to the\n     * [extend lifetime promises]{@link https://w3c.github.io/ServiceWorker/#extendableevent-extend-lifetime-promises}\n     * of the event event associated with the request being handled (usually a\n     * `FetchEvent`).\n     *\n     * Note: you can await\n     * {@link workbox-strategies.StrategyHandler~doneWaiting}\n     * to know when all added promises have settled.\n     *\n     * @param {Promise} promise A promise to add to the extend lifetime promises\n     *     of the event that triggered the request.\n     */\n    waitUntil(promise) {\n        this._extendLifetimePromises.push(promise);\n        return promise;\n    }\n    /**\n     * Returns a promise that resolves once all promises passed to\n     * {@link workbox-strategies.StrategyHandler~waitUntil}\n     * have settled.\n     *\n     * Note: any work done after `doneWaiting()` settles should be manually\n     * passed to an event's `waitUntil()` method (not this handler's\n     * `waitUntil()` method), otherwise the service worker thread my be killed\n     * prior to your work completing.\n     */\n    async doneWaiting() {\n        let promise;\n        while ((promise = this._extendLifetimePromises.shift())) {\n            await promise;\n        }\n    }\n    /**\n     * Stops running the strategy and immediately resolves any pending\n     * `waitUntil()` promises.\n     */\n    destroy() {\n        this._handlerDeferred.resolve(null);\n    }\n    /**\n     * This method will call cacheWillUpdate on the available plugins (or use\n     * status === 200) to determine if the Response is safe and valid to cache.\n     *\n     * @param {Request} options.request\n     * @param {Response} options.response\n     * @return {Promise<Response|undefined>}\n     *\n     * @private\n     */\n    async _ensureResponseSafeToCache(response) {\n        let responseToCache = response;\n        let pluginsUsed = false;\n        for (const callback of this.iterateCallbacks('cacheWillUpdate')) {\n            responseToCache =\n                (await callback({\n                    request: this.request,\n                    response: responseToCache,\n                    event: this.event,\n                })) || undefined;\n            pluginsUsed = true;\n            if (!responseToCache) {\n                break;\n            }\n        }\n        if (!pluginsUsed) {\n            if (responseToCache && responseToCache.status !== 200) {\n                responseToCache = undefined;\n            }\n            if (process.env.NODE_ENV !== 'production') {\n                if (responseToCache) {\n                    if (responseToCache.status !== 200) {\n                        if (responseToCache.status === 0) {\n                            logger.warn(`The response for '${this.request.url}' ` +\n                                `is an opaque response. The caching strategy that you're ` +\n                                `using will not cache opaque responses by default.`);\n                        }\n                        else {\n                            logger.debug(`The response for '${this.request.url}' ` +\n                                `returned a status code of '${response.status}' and won't ` +\n                                `be cached as a result.`);\n                        }\n                    }\n                }\n            }\n        }\n        return responseToCache;\n    }\n}\nexport { StrategyHandler };\n","/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { StrategyHandler } from './StrategyHandler.js';\nimport './_version.js';\n/**\n * An abstract base class that all other strategy classes must extend from:\n *\n * @memberof workbox-strategies\n */\nclass Strategy {\n    /**\n     * Creates a new instance of the strategy and sets all documented option\n     * properties as public instance properties.\n     *\n     * Note: if a custom strategy class extends the base Strategy class and does\n     * not need more than these properties, it does not need to define its own\n     * constructor.\n     *\n     * @param {Object} [options]\n     * @param {string} [options.cacheName] Cache name to store and retrieve\n     * requests. Defaults to the cache names provided by\n     * {@link workbox-core.cacheNames}.\n     * @param {Array<Object>} [options.plugins] [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n     * to use in conjunction with this caching strategy.\n     * @param {Object} [options.fetchOptions] Values passed along to the\n     * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\n     * of [non-navigation](https://github.com/GoogleChrome/workbox/issues/1796)\n     * `fetch()` requests made by this strategy.\n     * @param {Object} [options.matchOptions] The\n     * [`CacheQueryOptions`]{@link https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions}\n     * for any `cache.match()` or `cache.put()` calls made by this strategy.\n     */\n    constructor(options = {}) {\n        /**\n         * Cache name to store and retrieve\n         * requests. Defaults to the cache names provided by\n         * {@link workbox-core.cacheNames}.\n         *\n         * @type {string}\n         */\n        this.cacheName = cacheNames.getRuntimeName(options.cacheName);\n        /**\n         * The list\n         * [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n         * used by this strategy.\n         *\n         * @type {Array<Object>}\n         */\n        this.plugins = options.plugins || [];\n        /**\n         * Values passed along to the\n         * [`init`]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters}\n         * of all fetch() requests made by this strategy.\n         *\n         * @type {Object}\n         */\n        this.fetchOptions = options.fetchOptions;\n        /**\n         * The\n         * [`CacheQueryOptions`]{@link https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions}\n         * for any `cache.match()` or `cache.put()` calls made by this strategy.\n         *\n         * @type {Object}\n         */\n        this.matchOptions = options.matchOptions;\n    }\n    /**\n     * Perform a request strategy and returns a `Promise` that will resolve with\n     * a `Response`, invoking all relevant plugin callbacks.\n     *\n     * When a strategy instance is registered with a Workbox\n     * {@link workbox-routing.Route}, this method is automatically\n     * called when the route matches.\n     *\n     * Alternatively, this method can be used in a standalone `FetchEvent`\n     * listener by passing it to `event.respondWith()`.\n     *\n     * @param {FetchEvent|Object} options A `FetchEvent` or an object with the\n     *     properties listed below.\n     * @param {Request|string} options.request A request to run this strategy for.\n     * @param {ExtendableEvent} options.event The event associated with the\n     *     request.\n     * @param {URL} [options.url]\n     * @param {*} [options.params]\n     */\n    handle(options) {\n        const [responseDone] = this.handleAll(options);\n        return responseDone;\n    }\n    /**\n     * Similar to {@link workbox-strategies.Strategy~handle}, but\n     * instead of just returning a `Promise` that resolves to a `Response` it\n     * it will return an tuple of `[response, done]` promises, where the former\n     * (`response`) is equivalent to what `handle()` returns, and the latter is a\n     * Promise that will resolve once any promises that were added to\n     * `event.waitUntil()` as part of performing the strategy have completed.\n     *\n     * You can await the `done` promise to ensure any extra work performed by\n     * the strategy (usually caching responses) completes successfully.\n     *\n     * @param {FetchEvent|Object} options A `FetchEvent` or an object with the\n     *     properties listed below.\n     * @param {Request|string} options.request A request to run this strategy for.\n     * @param {ExtendableEvent} options.event The event associated with the\n     *     request.\n     * @param {URL} [options.url]\n     * @param {*} [options.params]\n     * @return {Array<Promise>} A tuple of [response, done]\n     *     promises that can be used to determine when the response resolves as\n     *     well as when the handler has completed all its work.\n     */\n    handleAll(options) {\n        // Allow for flexible options to be passed.\n        if (options instanceof FetchEvent) {\n            options = {\n                event: options,\n                request: options.request,\n            };\n        }\n        const event = options.event;\n        const request = typeof options.request === 'string'\n            ? new Request(options.request)\n            : options.request;\n        const params = 'params' in options ? options.params : undefined;\n        const handler = new StrategyHandler(this, { event, request, params });\n        const responseDone = this._getResponse(handler, request, event);\n        const handlerDone = this._awaitComplete(responseDone, handler, request, event);\n        // Return an array of promises, suitable for use with Promise.all().\n        return [responseDone, handlerDone];\n    }\n    async _getResponse(handler, request, event) {\n        await handler.runCallbacks('handlerWillStart', { event, request });\n        let response = undefined;\n        try {\n            response = await this._handle(request, handler);\n            // The \"official\" Strategy subclasses all throw this error automatically,\n            // but in case a third-party Strategy doesn't, ensure that we have a\n            // consistent failure when there's no response or an error response.\n            if (!response || response.type === 'error') {\n                throw new WorkboxError('no-response', { url: request.url });\n            }\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                for (const callback of handler.iterateCallbacks('handlerDidError')) {\n                    response = await callback({ error, event, request });\n                    if (response) {\n                        break;\n                    }\n                }\n            }\n            if (!response) {\n                throw error;\n            }\n            else if (process.env.NODE_ENV !== 'production') {\n                logger.log(`While responding to '${getFriendlyURL(request.url)}', ` +\n                    `an ${error instanceof Error ? error.toString() : ''} error occurred. Using a fallback response provided by ` +\n                    `a handlerDidError plugin.`);\n            }\n        }\n        for (const callback of handler.iterateCallbacks('handlerWillRespond')) {\n            response = await callback({ event, request, response });\n        }\n        return response;\n    }\n    async _awaitComplete(responseDone, handler, request, event) {\n        let response;\n        let error;\n        try {\n            response = await responseDone;\n        }\n        catch (error) {\n            // Ignore errors, as response errors should be caught via the `response`\n            // promise above. The `done` promise will only throw for errors in\n            // promises passed to `handler.waitUntil()`.\n        }\n        try {\n            await handler.runCallbacks('handlerDidRespond', {\n                event,\n                request,\n                response,\n            });\n            await handler.doneWaiting();\n        }\n        catch (waitUntilError) {\n            if (waitUntilError instanceof Error) {\n                error = waitUntilError;\n            }\n        }\n        await handler.runCallbacks('handlerDidComplete', {\n            event,\n            request,\n            response,\n            error: error,\n        });\n        handler.destroy();\n        if (error) {\n            throw error;\n        }\n    }\n}\nexport { Strategy };\n/**\n * Classes extending the `Strategy` based class should implement this method,\n * and leverage the {@link workbox-strategies.StrategyHandler}\n * arg to perform all fetching and cache logic, which will ensure all relevant\n * cache, cache options, fetch options and plugins are used (per the current\n * strategy instance).\n *\n * @name _handle\n * @instance\n * @abstract\n * @function\n * @param {Request} request\n * @param {workbox-strategies.StrategyHandler} handler\n * @return {Promise<Response>}\n *\n * @memberof workbox-strategies.Strategy\n */\n","/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { copyResponse } from 'workbox-core/copyResponse.js';\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { Strategy } from 'workbox-strategies/Strategy.js';\nimport './_version.js';\n/**\n * A {@link workbox-strategies.Strategy} implementation\n * specifically designed to work with\n * {@link workbox-precaching.PrecacheController}\n * to both cache and fetch precached assets.\n *\n * Note: an instance of this class is created automatically when creating a\n * `PrecacheController`; it's generally not necessary to create this yourself.\n *\n * @extends workbox-strategies.Strategy\n * @memberof workbox-precaching\n */\nclass PrecacheStrategy extends Strategy {\n    /**\n     *\n     * @param {Object} [options]\n     * @param {string} [options.cacheName] Cache name to store and retrieve\n     * requests. Defaults to the cache names provided by\n     * {@link workbox-core.cacheNames}.\n     * @param {Array<Object>} [options.plugins] {@link https://developers.google.com/web/tools/workbox/guides/using-plugins|Plugins}\n     * to use in conjunction with this caching strategy.\n     * @param {Object} [options.fetchOptions] Values passed along to the\n     * {@link https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters|init}\n     * of all fetch() requests made by this strategy.\n     * @param {Object} [options.matchOptions] The\n     * {@link https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions|CacheQueryOptions}\n     * for any `cache.match()` or `cache.put()` calls made by this strategy.\n     * @param {boolean} [options.fallbackToNetwork=true] Whether to attempt to\n     * get the response from the network if there's a precache miss.\n     */\n    constructor(options = {}) {\n        options.cacheName = cacheNames.getPrecacheName(options.cacheName);\n        super(options);\n        this._fallbackToNetwork =\n            options.fallbackToNetwork === false ? false : true;\n        // Redirected responses cannot be used to satisfy a navigation request, so\n        // any redirected response must be \"copied\" rather than cloned, so the new\n        // response doesn't contain the `redirected` flag. See:\n        // https://bugs.chromium.org/p/chromium/issues/detail?id=669363&desc=2#c1\n        this.plugins.push(PrecacheStrategy.copyRedirectedCacheableResponsesPlugin);\n    }\n    /**\n     * @private\n     * @param {Request|string} request A request to run this strategy for.\n     * @param {workbox-strategies.StrategyHandler} handler The event that\n     *     triggered the request.\n     * @return {Promise<Response>}\n     */\n    async _handle(request, handler) {\n        const response = await handler.cacheMatch(request);\n        if (response) {\n            return response;\n        }\n        // If this is an `install` event for an entry that isn't already cached,\n        // then populate the cache.\n        if (handler.event && handler.event.type === 'install') {\n            return await this._handleInstall(request, handler);\n        }\n        // Getting here means something went wrong. An entry that should have been\n        // precached wasn't found in the cache.\n        return await this._handleFetch(request, handler);\n    }\n    async _handleFetch(request, handler) {\n        let response;\n        const params = (handler.params || {});\n        // Fall back to the network if we're configured to do so.\n        if (this._fallbackToNetwork) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.warn(`The precached response for ` +\n                    `${getFriendlyURL(request.url)} in ${this.cacheName} was not ` +\n                    `found. Falling back to the network.`);\n            }\n            const integrityInManifest = params.integrity;\n            const integrityInRequest = request.integrity;\n            const noIntegrityConflict = !integrityInRequest || integrityInRequest === integrityInManifest;\n            // Do not add integrity if the original request is no-cors\n            // See https://github.com/GoogleChrome/workbox/issues/3096\n            response = await handler.fetch(new Request(request, {\n                integrity: request.mode !== 'no-cors'\n                    ? integrityInRequest || integrityInManifest\n                    : undefined,\n            }));\n            // It's only \"safe\" to repair the cache if we're using SRI to guarantee\n            // that the response matches the precache manifest's expectations,\n            // and there's either a) no integrity property in the incoming request\n            // or b) there is an integrity, and it matches the precache manifest.\n            // See https://github.com/GoogleChrome/workbox/issues/2858\n            // Also if the original request users no-cors we don't use integrity.\n            // See https://github.com/GoogleChrome/workbox/issues/3096\n            if (integrityInManifest &&\n                noIntegrityConflict &&\n                request.mode !== 'no-cors') {\n                this._useDefaultCacheabilityPluginIfNeeded();\n                const wasCached = await handler.cachePut(request, response.clone());\n                if (process.env.NODE_ENV !== 'production') {\n                    if (wasCached) {\n                        logger.log(`A response for ${getFriendlyURL(request.url)} ` +\n                            `was used to \"repair\" the precache.`);\n                    }\n                }\n            }\n        }\n        else {\n            // This shouldn't normally happen, but there are edge cases:\n            // https://github.com/GoogleChrome/workbox/issues/1441\n            throw new WorkboxError('missing-precache-entry', {\n                cacheName: this.cacheName,\n                url: request.url,\n            });\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            const cacheKey = params.cacheKey || (await handler.getCacheKey(request, 'read'));\n            // Workbox is going to handle the route.\n            // print the routing details to the console.\n            logger.groupCollapsed(`Precaching is responding to: ` + getFriendlyURL(request.url));\n            logger.log(`Serving the precached url: ${getFriendlyURL(cacheKey instanceof Request ? cacheKey.url : cacheKey)}`);\n            logger.groupCollapsed(`View request details here.`);\n            logger.log(request);\n            logger.groupEnd();\n            logger.groupCollapsed(`View response details here.`);\n            logger.log(response);\n            logger.groupEnd();\n            logger.groupEnd();\n        }\n        return response;\n    }\n    async _handleInstall(request, handler) {\n        this._useDefaultCacheabilityPluginIfNeeded();\n        const response = await handler.fetch(request);\n        // Make sure we defer cachePut() until after we know the response\n        // should be cached; see https://github.com/GoogleChrome/workbox/issues/2737\n        const wasCached = await handler.cachePut(request, response.clone());\n        if (!wasCached) {\n            // Throwing here will lead to the `install` handler failing, which\n            // we want to do if *any* of the responses aren't safe to cache.\n            throw new WorkboxError('bad-precaching-response', {\n                url: request.url,\n                status: response.status,\n            });\n        }\n        return response;\n    }\n    /**\n     * This method is complex, as there a number of things to account for:\n     *\n     * The `plugins` array can be set at construction, and/or it might be added to\n     * to at any time before the strategy is used.\n     *\n     * At the time the strategy is used (i.e. during an `install` event), there\n     * needs to be at least one plugin that implements `cacheWillUpdate` in the\n     * array, other than `copyRedirectedCacheableResponsesPlugin`.\n     *\n     * - If this method is called and there are no suitable `cacheWillUpdate`\n     * plugins, we need to add `defaultPrecacheCacheabilityPlugin`.\n     *\n     * - If this method is called and there is exactly one `cacheWillUpdate`, then\n     * we don't have to do anything (this might be a previously added\n     * `defaultPrecacheCacheabilityPlugin`, or it might be a custom plugin).\n     *\n     * - If this method is called and there is more than one `cacheWillUpdate`,\n     * then we need to check if one is `defaultPrecacheCacheabilityPlugin`. If so,\n     * we need to remove it. (This situation is unlikely, but it could happen if\n     * the strategy is used multiple times, the first without a `cacheWillUpdate`,\n     * and then later on after manually adding a custom `cacheWillUpdate`.)\n     *\n     * See https://github.com/GoogleChrome/workbox/issues/2737 for more context.\n     *\n     * @private\n     */\n    _useDefaultCacheabilityPluginIfNeeded() {\n        let defaultPluginIndex = null;\n        let cacheWillUpdatePluginCount = 0;\n        for (const [index, plugin] of this.plugins.entries()) {\n            // Ignore the copy redirected plugin when determining what to do.\n            if (plugin === PrecacheStrategy.copyRedirectedCacheableResponsesPlugin) {\n                continue;\n            }\n            // Save the default plugin's index, in case it needs to be removed.\n            if (plugin === PrecacheStrategy.defaultPrecacheCacheabilityPlugin) {\n                defaultPluginIndex = index;\n            }\n            if (plugin.cacheWillUpdate) {\n                cacheWillUpdatePluginCount++;\n            }\n        }\n        if (cacheWillUpdatePluginCount === 0) {\n            this.plugins.push(PrecacheStrategy.defaultPrecacheCacheabilityPlugin);\n        }\n        else if (cacheWillUpdatePluginCount > 1 && defaultPluginIndex !== null) {\n            // Only remove the default plugin; multiple custom plugins are allowed.\n            this.plugins.splice(defaultPluginIndex, 1);\n        }\n        // Nothing needs to be done if cacheWillUpdatePluginCount is 1\n    }\n}\nPrecacheStrategy.defaultPrecacheCacheabilityPlugin = {\n    async cacheWillUpdate({ response }) {\n        if (!response || response.status >= 400) {\n            return null;\n        }\n        return response;\n    },\n};\nPrecacheStrategy.copyRedirectedCacheableResponsesPlugin = {\n    async cacheWillUpdate({ response }) {\n        return response.redirected ? await copyResponse(response) : response;\n    },\n};\nexport { PrecacheStrategy };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { waitUntil } from 'workbox-core/_private/waitUntil.js';\nimport { createCacheKey } from './utils/createCacheKey.js';\nimport { PrecacheInstallReportPlugin } from './utils/PrecacheInstallReportPlugin.js';\nimport { PrecacheCacheKeyPlugin } from './utils/PrecacheCacheKeyPlugin.js';\nimport { printCleanupDetails } from './utils/printCleanupDetails.js';\nimport { printInstallDetails } from './utils/printInstallDetails.js';\nimport { PrecacheStrategy } from './PrecacheStrategy.js';\nimport './_version.js';\n/**\n * Performs efficient precaching of assets.\n *\n * @memberof workbox-precaching\n */\nclass PrecacheController {\n    /**\n     * Create a new PrecacheController.\n     *\n     * @param {Object} [options]\n     * @param {string} [options.cacheName] The cache to use for precaching.\n     * @param {string} [options.plugins] Plugins to use when precaching as well\n     * as responding to fetch events for precached assets.\n     * @param {boolean} [options.fallbackToNetwork=true] Whether to attempt to\n     * get the response from the network if there's a precache miss.\n     */\n    constructor({ cacheName, plugins = [], fallbackToNetwork = true, } = {}) {\n        this._urlsToCacheKeys = new Map();\n        this._urlsToCacheModes = new Map();\n        this._cacheKeysToIntegrities = new Map();\n        this._strategy = new PrecacheStrategy({\n            cacheName: cacheNames.getPrecacheName(cacheName),\n            plugins: [\n                ...plugins,\n                new PrecacheCacheKeyPlugin({ precacheController: this }),\n            ],\n            fallbackToNetwork,\n        });\n        // Bind the install and activate methods to the instance.\n        this.install = this.install.bind(this);\n        this.activate = this.activate.bind(this);\n    }\n    /**\n     * @type {workbox-precaching.PrecacheStrategy} The strategy created by this controller and\n     * used to cache assets and respond to fetch events.\n     */\n    get strategy() {\n        return this._strategy;\n    }\n    /**\n     * Adds items to the precache list, removing any duplicates and\n     * stores the files in the\n     * {@link workbox-core.cacheNames|\"precache cache\"} when the service\n     * worker installs.\n     *\n     * This method can be called multiple times.\n     *\n     * @param {Array<Object|string>} [entries=[]] Array of entries to precache.\n     */\n    precache(entries) {\n        this.addToCacheList(entries);\n        if (!this._installAndActiveListenersAdded) {\n            self.addEventListener('install', this.install);\n            self.addEventListener('activate', this.activate);\n            this._installAndActiveListenersAdded = true;\n        }\n    }\n    /**\n     * This method will add items to the precache list, removing duplicates\n     * and ensuring the information is valid.\n     *\n     * @param {Array<workbox-precaching.PrecacheController.PrecacheEntry|string>} entries\n     *     Array of entries to precache.\n     */\n    addToCacheList(entries) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isArray(entries, {\n                moduleName: 'workbox-precaching',\n                className: 'PrecacheController',\n                funcName: 'addToCacheList',\n                paramName: 'entries',\n            });\n        }\n        const urlsToWarnAbout = [];\n        for (const entry of entries) {\n            // See https://github.com/GoogleChrome/workbox/issues/2259\n            if (typeof entry === 'string') {\n                urlsToWarnAbout.push(entry);\n            }\n            else if (entry && entry.revision === undefined) {\n                urlsToWarnAbout.push(entry.url);\n            }\n            const { cacheKey, url } = createCacheKey(entry);\n            const cacheMode = typeof entry !== 'string' && entry.revision ? 'reload' : 'default';\n            if (this._urlsToCacheKeys.has(url) &&\n                this._urlsToCacheKeys.get(url) !== cacheKey) {\n                throw new WorkboxError('add-to-cache-list-conflicting-entries', {\n                    firstEntry: this._urlsToCacheKeys.get(url),\n                    secondEntry: cacheKey,\n                });\n            }\n            if (typeof entry !== 'string' && entry.integrity) {\n                if (this._cacheKeysToIntegrities.has(cacheKey) &&\n                    this._cacheKeysToIntegrities.get(cacheKey) !== entry.integrity) {\n                    throw new WorkboxError('add-to-cache-list-conflicting-integrities', {\n                        url,\n                    });\n                }\n                this._cacheKeysToIntegrities.set(cacheKey, entry.integrity);\n            }\n            this._urlsToCacheKeys.set(url, cacheKey);\n            this._urlsToCacheModes.set(url, cacheMode);\n            if (urlsToWarnAbout.length > 0) {\n                const warningMessage = `Workbox is precaching URLs without revision ` +\n                    `info: ${urlsToWarnAbout.join(', ')}\\nThis is generally NOT safe. ` +\n                    `Learn more at https://bit.ly/wb-precache`;\n                if (process.env.NODE_ENV === 'production') {\n                    // Use console directly to display this warning without bloating\n                    // bundle sizes by pulling in all of the logger codebase in prod.\n                    console.warn(warningMessage);\n                }\n                else {\n                    logger.warn(warningMessage);\n                }\n            }\n        }\n    }\n    /**\n     * Precaches new and updated assets. Call this method from the service worker\n     * install event.\n     *\n     * Note: this method calls `event.waitUntil()` for you, so you do not need\n     * to call it yourself in your event handlers.\n     *\n     * @param {ExtendableEvent} event\n     * @return {Promise<workbox-precaching.InstallResult>}\n     */\n    install(event) {\n        // waitUntil returns Promise<any>\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n        return waitUntil(event, async () => {\n            const installReportPlugin = new PrecacheInstallReportPlugin();\n            this.strategy.plugins.push(installReportPlugin);\n            // Cache entries one at a time.\n            // See https://github.com/GoogleChrome/workbox/issues/2528\n            for (const [url, cacheKey] of this._urlsToCacheKeys) {\n                const integrity = this._cacheKeysToIntegrities.get(cacheKey);\n                const cacheMode = this._urlsToCacheModes.get(url);\n                const request = new Request(url, {\n                    integrity,\n                    cache: cacheMode,\n                    credentials: 'same-origin',\n                });\n                await Promise.all(this.strategy.handleAll({\n                    params: { cacheKey },\n                    request,\n                    event,\n                }));\n            }\n            const { updatedURLs, notUpdatedURLs } = installReportPlugin;\n            if (process.env.NODE_ENV !== 'production') {\n                printInstallDetails(updatedURLs, notUpdatedURLs);\n            }\n            return { updatedURLs, notUpdatedURLs };\n        });\n    }\n    /**\n     * Deletes assets that are no longer present in the current precache manifest.\n     * Call this method from the service worker activate event.\n     *\n     * Note: this method calls `event.waitUntil()` for you, so you do not need\n     * to call it yourself in your event handlers.\n     *\n     * @param {ExtendableEvent} event\n     * @return {Promise<workbox-precaching.CleanupResult>}\n     */\n    activate(event) {\n        // waitUntil returns Promise<any>\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n        return waitUntil(event, async () => {\n            const cache = await self.caches.open(this.strategy.cacheName);\n            const currentlyCachedRequests = await cache.keys();\n            const expectedCacheKeys = new Set(this._urlsToCacheKeys.values());\n            const deletedURLs = [];\n            for (const request of currentlyCachedRequests) {\n                if (!expectedCacheKeys.has(request.url)) {\n                    await cache.delete(request);\n                    deletedURLs.push(request.url);\n                }\n            }\n            if (process.env.NODE_ENV !== 'production') {\n                printCleanupDetails(deletedURLs);\n            }\n            return { deletedURLs };\n        });\n    }\n    /**\n     * Returns a mapping of a precached URL to the corresponding cache key, taking\n     * into account the revision information for the URL.\n     *\n     * @return {Map<string, string>} A URL to cache key mapping.\n     */\n    getURLsToCacheKeys() {\n        return this._urlsToCacheKeys;\n    }\n    /**\n     * Returns a list of all the URLs that have been precached by the current\n     * service worker.\n     *\n     * @return {Array<string>} The precached URLs.\n     */\n    getCachedURLs() {\n        return [...this._urlsToCacheKeys.keys()];\n    }\n    /**\n     * Returns the cache key used for storing a given URL. If that URL is\n     * unversioned, like `/index.html', then the cache key will be the original\n     * URL with a search parameter appended to it.\n     *\n     * @param {string} url A URL whose cache key you want to look up.\n     * @return {string} The versioned URL that corresponds to a cache key\n     * for the original URL, or undefined if that URL isn't precached.\n     */\n    getCacheKeyForURL(url) {\n        const urlObject = new URL(url, location.href);\n        return this._urlsToCacheKeys.get(urlObject.href);\n    }\n    /**\n     * @param {string} url A cache key whose SRI you want to look up.\n     * @return {string} The subresource integrity associated with the cache key,\n     * or undefined if it's not set.\n     */\n    getIntegrityForCacheKey(cacheKey) {\n        return this._cacheKeysToIntegrities.get(cacheKey);\n    }\n    /**\n     * This acts as a drop-in replacement for\n     * [`cache.match()`](https://developer.mozilla.org/en-US/docs/Web/API/Cache/match)\n     * with the following differences:\n     *\n     * - It knows what the name of the precache is, and only checks in that cache.\n     * - It allows you to pass in an \"original\" URL without versioning parameters,\n     * and it will automatically look up the correct cache key for the currently\n     * active revision of that URL.\n     *\n     * E.g., `matchPrecache('index.html')` will find the correct precached\n     * response for the currently active service worker, even if the actual cache\n     * key is `'/index.html?__WB_REVISION__=1234abcd'`.\n     *\n     * @param {string|Request} request The key (without revisioning parameters)\n     * to look up in the precache.\n     * @return {Promise<Response|undefined>}\n     */\n    async matchPrecache(request) {\n        const url = request instanceof Request ? request.url : request;\n        const cacheKey = this.getCacheKeyForURL(url);\n        if (cacheKey) {\n            const cache = await self.caches.open(this.strategy.cacheName);\n            return cache.match(cacheKey);\n        }\n        return undefined;\n    }\n    /**\n     * Returns a function that looks up `url` in the precache (taking into\n     * account revision information), and returns the corresponding `Response`.\n     *\n     * @param {string} url The precached URL which will be used to lookup the\n     * `Response`.\n     * @return {workbox-routing~handlerCallback}\n     */\n    createHandlerBoundToURL(url) {\n        const cacheKey = this.getCacheKeyForURL(url);\n        if (!cacheKey) {\n            throw new WorkboxError('non-precached-url', { url });\n        }\n        return (options) => {\n            options.request = new Request(url);\n            options.params = Object.assign({ cacheKey }, options.params);\n            return this.strategy.handle(options);\n        };\n    }\n}\nexport { PrecacheController };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { PrecacheController } from '../PrecacheController.js';\nimport '../_version.js';\nlet precacheController;\n/**\n * @return {PrecacheController}\n * @private\n */\nexport const getOrCreatePrecacheController = () => {\n    if (!precacheController) {\n        precacheController = new PrecacheController();\n    }\n    return precacheController;\n};\n","\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:routing:7.0.0'] && _();\n}\ncatch (e) { }\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * The default HTTP method, 'GET', used when there's no specific method\n * configured for a route.\n *\n * @type {string}\n *\n * @private\n */\nexport const defaultMethod = 'GET';\n/**\n * The list of valid HTTP methods associated with requests that could be routed.\n *\n * @type {Array<string>}\n *\n * @private\n */\nexport const validMethods = [\n    'DELETE',\n    'GET',\n    'HEAD',\n    'PATCH',\n    'POST',\n    'PUT',\n];\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport '../_version.js';\n/**\n * @param {function()|Object} handler Either a function, or an object with a\n * 'handle' method.\n * @return {Object} An object with a handle method.\n *\n * @private\n */\nexport const normalizeHandler = (handler) => {\n    if (handler && typeof handler === 'object') {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.hasMethod(handler, 'handle', {\n                moduleName: 'workbox-routing',\n                className: 'Route',\n                funcName: 'constructor',\n                paramName: 'handler',\n            });\n        }\n        return handler;\n    }\n    else {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(handler, 'function', {\n                moduleName: 'workbox-routing',\n                className: 'Route',\n                funcName: 'constructor',\n                paramName: 'handler',\n            });\n        }\n        return { handle: handler };\n    }\n};\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { defaultMethod, validMethods } from './utils/constants.js';\nimport { normalizeHandler } from './utils/normalizeHandler.js';\nimport './_version.js';\n/**\n * A `Route` consists of a pair of callback functions, \"match\" and \"handler\".\n * The \"match\" callback determine if a route should be used to \"handle\" a\n * request by returning a non-falsy value if it can. The \"handler\" callback\n * is called when there is a match and should return a Promise that resolves\n * to a `Response`.\n *\n * @memberof workbox-routing\n */\nclass Route {\n    /**\n     * Constructor for Route class.\n     *\n     * @param {workbox-routing~matchCallback} match\n     * A callback function that determines whether the route matches a given\n     * `fetch` event by returning a non-falsy value.\n     * @param {workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resolving to a Response.\n     * @param {string} [method='GET'] The HTTP method to match the Route\n     * against.\n     */\n    constructor(match, handler, method = defaultMethod) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(match, 'function', {\n                moduleName: 'workbox-routing',\n                className: 'Route',\n                funcName: 'constructor',\n                paramName: 'match',\n            });\n            if (method) {\n                assert.isOneOf(method, validMethods, { paramName: 'method' });\n            }\n        }\n        // These values are referenced directly by Router so cannot be\n        // altered by minificaton.\n        this.handler = normalizeHandler(handler);\n        this.match = match;\n        this.method = method;\n    }\n    /**\n     *\n     * @param {workbox-routing-handlerCallback} handler A callback\n     * function that returns a Promise resolving to a Response\n     */\n    setCatchHandler(handler) {\n        this.catchHandler = normalizeHandler(handler);\n    }\n}\nexport { Route };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { Route } from './Route.js';\nimport './_version.js';\n/**\n * RegExpRoute makes it easy to create a regular expression based\n * {@link workbox-routing.Route}.\n *\n * For same-origin requests the RegExp only needs to match part of the URL. For\n * requests against third-party servers, you must define a RegExp that matches\n * the start of the URL.\n *\n * @memberof workbox-routing\n * @extends workbox-routing.Route\n */\nclass RegExpRoute extends Route {\n    /**\n     * If the regular expression contains\n     * [capture groups]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp#grouping-back-references},\n     * the captured values will be passed to the\n     * {@link workbox-routing~handlerCallback} `params`\n     * argument.\n     *\n     * @param {RegExp} regExp The regular expression to match against URLs.\n     * @param {workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resulting in a Response.\n     * @param {string} [method='GET'] The HTTP method to match the Route\n     * against.\n     */\n    constructor(regExp, handler, method) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(regExp, RegExp, {\n                moduleName: 'workbox-routing',\n                className: 'RegExpRoute',\n                funcName: 'constructor',\n                paramName: 'pattern',\n            });\n        }\n        const match = ({ url }) => {\n            const result = regExp.exec(url.href);\n            // Return immediately if there's no match.\n            if (!result) {\n                return;\n            }\n            // Require that the match start at the first character in the URL string\n            // if it's a cross-origin request.\n            // See https://github.com/GoogleChrome/workbox/issues/281 for the context\n            // behind this behavior.\n            if (url.origin !== location.origin && result.index !== 0) {\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.debug(`The regular expression '${regExp.toString()}' only partially matched ` +\n                        `against the cross-origin URL '${url.toString()}'. RegExpRoute's will only ` +\n                        `handle cross-origin requests if they match the entire URL.`);\n                }\n                return;\n            }\n            // If the route matches, but there aren't any capture groups defined, then\n            // this will return [], which is truthy and therefore sufficient to\n            // indicate a match.\n            // If there are capture groups, then it will return their values.\n            return result.slice(1);\n        };\n        super(match, handler, method);\n    }\n}\nexport { RegExpRoute };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { defaultMethod } from './utils/constants.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { normalizeHandler } from './utils/normalizeHandler.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport './_version.js';\n/**\n * The Router can be used to process a `FetchEvent` using one or more\n * {@link workbox-routing.Route}, responding with a `Response` if\n * a matching route exists.\n *\n * If no route matches a given a request, the Router will use a \"default\"\n * handler if one is defined.\n *\n * Should the matching Route throw an error, the Router will use a \"catch\"\n * handler if one is defined to gracefully deal with issues and respond with a\n * Request.\n *\n * If a request matches multiple routes, the **earliest** registered route will\n * be used to respond to the request.\n *\n * @memberof workbox-routing\n */\nclass Router {\n    /**\n     * Initializes a new Router.\n     */\n    constructor() {\n        this._routes = new Map();\n        this._defaultHandlerMap = new Map();\n    }\n    /**\n     * @return {Map<string, Array<workbox-routing.Route>>} routes A `Map` of HTTP\n     * method name ('GET', etc.) to an array of all the corresponding `Route`\n     * instances that are registered.\n     */\n    get routes() {\n        return this._routes;\n    }\n    /**\n     * Adds a fetch event listener to respond to events when a route matches\n     * the event's request.\n     */\n    addFetchListener() {\n        // See https://github.com/Microsoft/TypeScript/issues/28357#issuecomment-436484705\n        self.addEventListener('fetch', ((event) => {\n            const { request } = event;\n            const responsePromise = this.handleRequest({ request, event });\n            if (responsePromise) {\n                event.respondWith(responsePromise);\n            }\n        }));\n    }\n    /**\n     * Adds a message event listener for URLs to cache from the window.\n     * This is useful to cache resources loaded on the page prior to when the\n     * service worker started controlling it.\n     *\n     * The format of the message data sent from the window should be as follows.\n     * Where the `urlsToCache` array may consist of URL strings or an array of\n     * URL string + `requestInit` object (the same as you'd pass to `fetch()`).\n     *\n     * ```\n     * {\n     *   type: 'CACHE_URLS',\n     *   payload: {\n     *     urlsToCache: [\n     *       './script1.js',\n     *       './script2.js',\n     *       ['./script3.js', {mode: 'no-cors'}],\n     *     ],\n     *   },\n     * }\n     * ```\n     */\n    addCacheListener() {\n        // See https://github.com/Microsoft/TypeScript/issues/28357#issuecomment-436484705\n        self.addEventListener('message', ((event) => {\n            // event.data is type 'any'\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n            if (event.data && event.data.type === 'CACHE_URLS') {\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                const { payload } = event.data;\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.debug(`Caching URLs from the window`, payload.urlsToCache);\n                }\n                const requestPromises = Promise.all(payload.urlsToCache.map((entry) => {\n                    if (typeof entry === 'string') {\n                        entry = [entry];\n                    }\n                    const request = new Request(...entry);\n                    return this.handleRequest({ request, event });\n                    // TODO(philipwalton): TypeScript errors without this typecast for\n                    // some reason (probably a bug). The real type here should work but\n                    // doesn't: `Array<Promise<Response> | undefined>`.\n                })); // TypeScript\n                event.waitUntil(requestPromises);\n                // If a MessageChannel was used, reply to the message on success.\n                if (event.ports && event.ports[0]) {\n                    void requestPromises.then(() => event.ports[0].postMessage(true));\n                }\n            }\n        }));\n    }\n    /**\n     * Apply the routing rules to a FetchEvent object to get a Response from an\n     * appropriate Route's handler.\n     *\n     * @param {Object} options\n     * @param {Request} options.request The request to handle.\n     * @param {ExtendableEvent} options.event The event that triggered the\n     *     request.\n     * @return {Promise<Response>|undefined} A promise is returned if a\n     *     registered route can handle the request. If there is no matching\n     *     route and there's no `defaultHandler`, `undefined` is returned.\n     */\n    handleRequest({ request, event, }) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(request, Request, {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'handleRequest',\n                paramName: 'options.request',\n            });\n        }\n        const url = new URL(request.url, location.href);\n        if (!url.protocol.startsWith('http')) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`Workbox Router only supports URLs that start with 'http'.`);\n            }\n            return;\n        }\n        const sameOrigin = url.origin === location.origin;\n        const { params, route } = this.findMatchingRoute({\n            event,\n            request,\n            sameOrigin,\n            url,\n        });\n        let handler = route && route.handler;\n        const debugMessages = [];\n        if (process.env.NODE_ENV !== 'production') {\n            if (handler) {\n                debugMessages.push([`Found a route to handle this request:`, route]);\n                if (params) {\n                    debugMessages.push([\n                        `Passing the following params to the route's handler:`,\n                        params,\n                    ]);\n                }\n            }\n        }\n        // If we don't have a handler because there was no matching route, then\n        // fall back to defaultHandler if that's defined.\n        const method = request.method;\n        if (!handler && this._defaultHandlerMap.has(method)) {\n            if (process.env.NODE_ENV !== 'production') {\n                debugMessages.push(`Failed to find a matching route. Falling ` +\n                    `back to the default handler for ${method}.`);\n            }\n            handler = this._defaultHandlerMap.get(method);\n        }\n        if (!handler) {\n            if (process.env.NODE_ENV !== 'production') {\n                // No handler so Workbox will do nothing. If logs is set of debug\n                // i.e. verbose, we should print out this information.\n                logger.debug(`No route found for: ${getFriendlyURL(url)}`);\n            }\n            return;\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            // We have a handler, meaning Workbox is going to handle the route.\n            // print the routing details to the console.\n            logger.groupCollapsed(`Router is responding to: ${getFriendlyURL(url)}`);\n            debugMessages.forEach((msg) => {\n                if (Array.isArray(msg)) {\n                    logger.log(...msg);\n                }\n                else {\n                    logger.log(msg);\n                }\n            });\n            logger.groupEnd();\n        }\n        // Wrap in try and catch in case the handle method throws a synchronous\n        // error. It should still callback to the catch handler.\n        let responsePromise;\n        try {\n            responsePromise = handler.handle({ url, request, event, params });\n        }\n        catch (err) {\n            responsePromise = Promise.reject(err);\n        }\n        // Get route's catch handler, if it exists\n        const catchHandler = route && route.catchHandler;\n        if (responsePromise instanceof Promise &&\n            (this._catchHandler || catchHandler)) {\n            responsePromise = responsePromise.catch(async (err) => {\n                // If there's a route catch handler, process that first\n                if (catchHandler) {\n                    if (process.env.NODE_ENV !== 'production') {\n                        // Still include URL here as it will be async from the console group\n                        // and may not make sense without the URL\n                        logger.groupCollapsed(`Error thrown when responding to: ` +\n                            ` ${getFriendlyURL(url)}. Falling back to route's Catch Handler.`);\n                        logger.error(`Error thrown by:`, route);\n                        logger.error(err);\n                        logger.groupEnd();\n                    }\n                    try {\n                        return await catchHandler.handle({ url, request, event, params });\n                    }\n                    catch (catchErr) {\n                        if (catchErr instanceof Error) {\n                            err = catchErr;\n                        }\n                    }\n                }\n                if (this._catchHandler) {\n                    if (process.env.NODE_ENV !== 'production') {\n                        // Still include URL here as it will be async from the console group\n                        // and may not make sense without the URL\n                        logger.groupCollapsed(`Error thrown when responding to: ` +\n                            ` ${getFriendlyURL(url)}. Falling back to global Catch Handler.`);\n                        logger.error(`Error thrown by:`, route);\n                        logger.error(err);\n                        logger.groupEnd();\n                    }\n                    return this._catchHandler.handle({ url, request, event });\n                }\n                throw err;\n            });\n        }\n        return responsePromise;\n    }\n    /**\n     * Checks a request and URL (and optionally an event) against the list of\n     * registered routes, and if there's a match, returns the corresponding\n     * route along with any params generated by the match.\n     *\n     * @param {Object} options\n     * @param {URL} options.url\n     * @param {boolean} options.sameOrigin The result of comparing `url.origin`\n     *     against the current origin.\n     * @param {Request} options.request The request to match.\n     * @param {Event} options.event The corresponding event.\n     * @return {Object} An object with `route` and `params` properties.\n     *     They are populated if a matching route was found or `undefined`\n     *     otherwise.\n     */\n    findMatchingRoute({ url, sameOrigin, request, event, }) {\n        const routes = this._routes.get(request.method) || [];\n        for (const route of routes) {\n            let params;\n            // route.match returns type any, not possible to change right now.\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            const matchResult = route.match({ url, sameOrigin, request, event });\n            if (matchResult) {\n                if (process.env.NODE_ENV !== 'production') {\n                    // Warn developers that using an async matchCallback is almost always\n                    // not the right thing to do.\n                    if (matchResult instanceof Promise) {\n                        logger.warn(`While routing ${getFriendlyURL(url)}, an async ` +\n                            `matchCallback function was used. Please convert the ` +\n                            `following route to use a synchronous matchCallback function:`, route);\n                    }\n                }\n                // See https://github.com/GoogleChrome/workbox/issues/2079\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                params = matchResult;\n                if (Array.isArray(params) && params.length === 0) {\n                    // Instead of passing an empty array in as params, use undefined.\n                    params = undefined;\n                }\n                else if (matchResult.constructor === Object && // eslint-disable-line\n                    Object.keys(matchResult).length === 0) {\n                    // Instead of passing an empty object in as params, use undefined.\n                    params = undefined;\n                }\n                else if (typeof matchResult === 'boolean') {\n                    // For the boolean value true (rather than just something truth-y),\n                    // don't set params.\n                    // See https://github.com/GoogleChrome/workbox/pull/2134#issuecomment-513924353\n                    params = undefined;\n                }\n                // Return early if have a match.\n                return { route, params };\n            }\n        }\n        // If no match was found above, return and empty object.\n        return {};\n    }\n    /**\n     * Define a default `handler` that's called when no routes explicitly\n     * match the incoming request.\n     *\n     * Each HTTP method ('GET', 'POST', etc.) gets its own default handler.\n     *\n     * Without a default handler, unmatched requests will go against the\n     * network as if there were no service worker present.\n     *\n     * @param {workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resulting in a Response.\n     * @param {string} [method='GET'] The HTTP method to associate with this\n     * default handler. Each method has its own default.\n     */\n    setDefaultHandler(handler, method = defaultMethod) {\n        this._defaultHandlerMap.set(method, normalizeHandler(handler));\n    }\n    /**\n     * If a Route throws an error while handling a request, this `handler`\n     * will be called and given a chance to provide a response.\n     *\n     * @param {workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resulting in a Response.\n     */\n    setCatchHandler(handler) {\n        this._catchHandler = normalizeHandler(handler);\n    }\n    /**\n     * Registers a route with the router.\n     *\n     * @param {workbox-routing.Route} route The route to register.\n     */\n    registerRoute(route) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(route, 'object', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route',\n            });\n            assert.hasMethod(route, 'match', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route',\n            });\n            assert.isType(route.handler, 'object', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route',\n            });\n            assert.hasMethod(route.handler, 'handle', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route.handler',\n            });\n            assert.isType(route.method, 'string', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route.method',\n            });\n        }\n        if (!this._routes.has(route.method)) {\n            this._routes.set(route.method, []);\n        }\n        // Give precedence to all of the earlier routes by adding this additional\n        // route to the end of the array.\n        this._routes.get(route.method).push(route);\n    }\n    /**\n     * Unregisters a route with the router.\n     *\n     * @param {workbox-routing.Route} route The route to unregister.\n     */\n    unregisterRoute(route) {\n        if (!this._routes.has(route.method)) {\n            throw new WorkboxError('unregister-route-but-not-found-with-method', {\n                method: route.method,\n            });\n        }\n        const routeIndex = this._routes.get(route.method).indexOf(route);\n        if (routeIndex > -1) {\n            this._routes.get(route.method).splice(routeIndex, 1);\n        }\n        else {\n            throw new WorkboxError('unregister-route-route-not-registered');\n        }\n    }\n}\nexport { Router };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { Router } from '../Router.js';\nimport '../_version.js';\nlet defaultRouter;\n/**\n * Creates a new, singleton Router instance if one does not exist. If one\n * does already exist, that instance is returned.\n *\n * @private\n * @return {Router}\n */\nexport const getOrCreateDefaultRouter = () => {\n    if (!defaultRouter) {\n        defaultRouter = new Router();\n        // The helpers that use the default Router assume these listeners exist.\n        defaultRouter.addFetchListener();\n        defaultRouter.addCacheListener();\n    }\n    return defaultRouter;\n};\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { Route } from './Route.js';\nimport { RegExpRoute } from './RegExpRoute.js';\nimport { getOrCreateDefaultRouter } from './utils/getOrCreateDefaultRouter.js';\nimport './_version.js';\n/**\n * Easily register a RegExp, string, or function with a caching\n * strategy to a singleton Router instance.\n *\n * This method will generate a Route for you if needed and\n * call {@link workbox-routing.Router#registerRoute}.\n *\n * @param {RegExp|string|workbox-routing.Route~matchCallback|workbox-routing.Route} capture\n * If the capture param is a `Route`, all other arguments will be ignored.\n * @param {workbox-routing~handlerCallback} [handler] A callback\n * function that returns a Promise resulting in a Response. This parameter\n * is required if `capture` is not a `Route` object.\n * @param {string} [method='GET'] The HTTP method to match the Route\n * against.\n * @return {workbox-routing.Route} The generated `Route`.\n *\n * @memberof workbox-routing\n */\nfunction registerRoute(capture, handler, method) {\n    let route;\n    if (typeof capture === 'string') {\n        const captureUrl = new URL(capture, location.href);\n        if (process.env.NODE_ENV !== 'production') {\n            if (!(capture.startsWith('/') || capture.startsWith('http'))) {\n                throw new WorkboxError('invalid-string', {\n                    moduleName: 'workbox-routing',\n                    funcName: 'registerRoute',\n                    paramName: 'capture',\n                });\n            }\n            // We want to check if Express-style wildcards are in the pathname only.\n            // TODO: Remove this log message in v4.\n            const valueToCheck = capture.startsWith('http')\n                ? captureUrl.pathname\n                : capture;\n            // See https://github.com/pillarjs/path-to-regexp#parameters\n            const wildcards = '[*:?+]';\n            if (new RegExp(`${wildcards}`).exec(valueToCheck)) {\n                logger.debug(`The '$capture' parameter contains an Express-style wildcard ` +\n                    `character (${wildcards}). Strings are now always interpreted as ` +\n                    `exact matches; use a RegExp for partial or wildcard matches.`);\n            }\n        }\n        const matchCallback = ({ url }) => {\n            if (process.env.NODE_ENV !== 'production') {\n                if (url.pathname === captureUrl.pathname &&\n                    url.origin !== captureUrl.origin) {\n                    logger.debug(`${capture} only partially matches the cross-origin URL ` +\n                        `${url.toString()}. This route will only handle cross-origin requests ` +\n                        `if they match the entire URL.`);\n                }\n            }\n            return url.href === captureUrl.href;\n        };\n        // If `capture` is a string then `handler` and `method` must be present.\n        route = new Route(matchCallback, handler, method);\n    }\n    else if (capture instanceof RegExp) {\n        // If `capture` is a `RegExp` then `handler` and `method` must be present.\n        route = new RegExpRoute(capture, handler, method);\n    }\n    else if (typeof capture === 'function') {\n        // If `capture` is a function then `handler` and `method` must be present.\n        route = new Route(capture, handler, method);\n    }\n    else if (capture instanceof Route) {\n        route = capture;\n    }\n    else {\n        throw new WorkboxError('unsupported-route-type', {\n            moduleName: 'workbox-routing',\n            funcName: 'registerRoute',\n            paramName: 'capture',\n        });\n    }\n    const defaultRouter = getOrCreateDefaultRouter();\n    defaultRouter.registerRoute(route);\n    return route;\n}\nexport { registerRoute };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * Removes any URL search parameters that should be ignored.\n *\n * @param {URL} urlObject The original URL.\n * @param {Array<RegExp>} ignoreURLParametersMatching RegExps to test against\n * each search parameter name. Matches mean that the search parameter should be\n * ignored.\n * @return {URL} The URL with any ignored search parameters removed.\n *\n * @private\n * @memberof workbox-precaching\n */\nexport function removeIgnoredSearchParams(urlObject, ignoreURLParametersMatching = []) {\n    // Convert the iterable into an array at the start of the loop to make sure\n    // deletion doesn't mess up iteration.\n    for (const paramName of [...urlObject.searchParams.keys()]) {\n        if (ignoreURLParametersMatching.some((regExp) => regExp.test(paramName))) {\n            urlObject.searchParams.delete(paramName);\n        }\n    }\n    return urlObject;\n}\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { removeIgnoredSearchParams } from './removeIgnoredSearchParams.js';\nimport '../_version.js';\n/**\n * Generator function that yields possible variations on the original URL to\n * check, one at a time.\n *\n * @param {string} url\n * @param {Object} options\n *\n * @private\n * @memberof workbox-precaching\n */\nexport function* generateURLVariations(url, { ignoreURLParametersMatching = [/^utm_/, /^fbclid$/], directoryIndex = 'index.html', cleanURLs = true, urlManipulation, } = {}) {\n    const urlObject = new URL(url, location.href);\n    urlObject.hash = '';\n    yield urlObject.href;\n    const urlWithoutIgnoredParams = removeIgnoredSearchParams(urlObject, ignoreURLParametersMatching);\n    yield urlWithoutIgnoredParams.href;\n    if (directoryIndex && urlWithoutIgnoredParams.pathname.endsWith('/')) {\n        const directoryURL = new URL(urlWithoutIgnoredParams.href);\n        directoryURL.pathname += directoryIndex;\n        yield directoryURL.href;\n    }\n    if (cleanURLs) {\n        const cleanURL = new URL(urlWithoutIgnoredParams.href);\n        cleanURL.pathname += '.html';\n        yield cleanURL.href;\n    }\n    if (urlManipulation) {\n        const additionalURLs = urlManipulation({ url: urlObject });\n        for (const urlToAttempt of additionalURLs) {\n            yield urlToAttempt.href;\n        }\n    }\n}\n","/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { Route } from 'workbox-routing/Route.js';\nimport { generateURLVariations } from './utils/generateURLVariations.js';\nimport './_version.js';\n/**\n * A subclass of {@link workbox-routing.Route} that takes a\n * {@link workbox-precaching.PrecacheController}\n * instance and uses it to match incoming requests and handle fetching\n * responses from the precache.\n *\n * @memberof workbox-precaching\n * @extends workbox-routing.Route\n */\nclass PrecacheRoute extends Route {\n    /**\n     * @param {PrecacheController} precacheController A `PrecacheController`\n     * instance used to both match requests and respond to fetch events.\n     * @param {Object} [options] Options to control how requests are matched\n     * against the list of precached URLs.\n     * @param {string} [options.directoryIndex=index.html] The `directoryIndex` will\n     * check cache entries for a URLs ending with '/' to see if there is a hit when\n     * appending the `directoryIndex` value.\n     * @param {Array<RegExp>} [options.ignoreURLParametersMatching=[/^utm_/, /^fbclid$/]] An\n     * array of regex's to remove search params when looking for a cache match.\n     * @param {boolean} [options.cleanURLs=true] The `cleanURLs` option will\n     * check the cache for the URL with a `.html` added to the end of the end.\n     * @param {workbox-precaching~urlManipulation} [options.urlManipulation]\n     * This is a function that should take a URL and return an array of\n     * alternative URLs that should be checked for precache matches.\n     */\n    constructor(precacheController, options) {\n        const match = ({ request, }) => {\n            const urlsToCacheKeys = precacheController.getURLsToCacheKeys();\n            for (const possibleURL of generateURLVariations(request.url, options)) {\n                const cacheKey = urlsToCacheKeys.get(possibleURL);\n                if (cacheKey) {\n                    const integrity = precacheController.getIntegrityForCacheKey(cacheKey);\n                    return { cacheKey, integrity };\n                }\n            }\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`Precaching did not find a match for ` + getFriendlyURL(request.url));\n            }\n            return;\n        };\n        super(match, precacheController.strategy);\n    }\n}\nexport { PrecacheRoute };\n","/*\n  Copyright 2019 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { registerRoute } from 'workbox-routing/registerRoute.js';\nimport { getOrCreatePrecacheController } from './utils/getOrCreatePrecacheController.js';\nimport { PrecacheRoute } from './PrecacheRoute.js';\nimport './_version.js';\n/**\n * Add a `fetch` listener to the service worker that will\n * respond to\n * [network requests]{@link https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers#Custom_responses_to_requests}\n * with precached assets.\n *\n * Requests for assets that aren't precached, the `FetchEvent` will not be\n * responded to, allowing the event to fall through to other `fetch` event\n * listeners.\n *\n * @param {Object} [options] See the {@link workbox-precaching.PrecacheRoute}\n * options.\n *\n * @memberof workbox-precaching\n */\nfunction addRoute(options) {\n    const precacheController = getOrCreatePrecacheController();\n    const precacheRoute = new PrecacheRoute(precacheController, options);\n    registerRoute(precacheRoute);\n}\nexport { addRoute };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nconst SUBSTRING_TO_FIND = '-precache-';\n/**\n * Cleans up incompatible precaches that were created by older versions of\n * Workbox, by a service worker registered under the current scope.\n *\n * This is meant to be called as part of the `activate` event.\n *\n * This should be safe to use as long as you don't include `substringToFind`\n * (defaulting to `-precache-`) in your non-precache cache names.\n *\n * @param {string} currentPrecacheName The cache name currently in use for\n * precaching. This cache won't be deleted.\n * @param {string} [substringToFind='-precache-'] Cache names which include this\n * substring will be deleted (excluding `currentPrecacheName`).\n * @return {Array<string>} A list of all the cache names that were deleted.\n *\n * @private\n * @memberof workbox-precaching\n */\nconst deleteOutdatedCaches = async (currentPrecacheName, substringToFind = SUBSTRING_TO_FIND) => {\n    const cacheNames = await self.caches.keys();\n    const cacheNamesToDelete = cacheNames.filter((cacheName) => {\n        return (cacheName.includes(substringToFind) &&\n            cacheName.includes(self.registration.scope) &&\n            cacheName !== currentPrecacheName);\n    });\n    await Promise.all(cacheNamesToDelete.map((cacheName) => self.caches.delete(cacheName)));\n    return cacheNamesToDelete;\n};\nexport { deleteOutdatedCaches };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { deleteOutdatedCaches } from './utils/deleteOutdatedCaches.js';\nimport './_version.js';\n/**\n * Adds an `activate` event listener which will clean up incompatible\n * precaches that were created by older versions of Workbox.\n *\n * @memberof workbox-precaching\n */\nfunction cleanupOutdatedCaches() {\n    // See https://github.com/Microsoft/TypeScript/issues/28357#issuecomment-436484705\n    self.addEventListener('activate', ((event) => {\n        const cacheName = cacheNames.getPrecacheName();\n        event.waitUntil(deleteOutdatedCaches(cacheName).then((cachesDeleted) => {\n            if (process.env.NODE_ENV !== 'production') {\n                if (cachesDeleted.length > 0) {\n                    logger.log(`The following out-of-date precaches were cleaned up ` +\n                        `automatically:`, cachesDeleted);\n                }\n            }\n        }));\n    }));\n}\nexport { cleanupOutdatedCaches };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { getOrCreatePrecacheController } from './utils/getOrCreatePrecacheController.js';\nimport './_version.js';\n/**\n * Adds items to the precache list, removing any duplicates and\n * stores the files in the\n * {@link workbox-core.cacheNames|\"precache cache\"} when the service\n * worker installs.\n *\n * This method can be called multiple times.\n *\n * Please note: This method **will not** serve any of the cached files for you.\n * It only precaches files. To respond to a network request you call\n * {@link workbox-precaching.addRoute}.\n *\n * If you have a single array of files to precache, you can just call\n * {@link workbox-precaching.precacheAndRoute}.\n *\n * @param {Array<Object|string>} [entries=[]] Array of entries to precache.\n *\n * @memberof workbox-precaching\n */\nfunction precache(entries) {\n    const precacheController = getOrCreatePrecacheController();\n    precacheController.precache(entries);\n}\nexport { precache };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { addRoute } from './addRoute.js';\nimport { precache } from './precache.js';\nimport './_version.js';\n/**\n * This method will add entries to the precache list and add a route to\n * respond to fetch events.\n *\n * This is a convenience method that will call\n * {@link workbox-precaching.precache} and\n * {@link workbox-precaching.addRoute} in a single call.\n *\n * @param {Array<Object|string>} entries Array of entries to precache.\n * @param {Object} [options] See the\n * {@link workbox-precaching.PrecacheRoute} options.\n *\n * @memberof workbox-precaching\n */\nfunction precacheAndRoute(entries, options) {\n    precache(entries);\n    addRoute(options);\n}\nexport { precacheAndRoute };\n","\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:navigation-preload:7.0.0'] && _();\n}\ncatch (e) { }\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport './_version.js';\n/**\n * @return {boolean} Whether or not the current browser supports enabling\n * navigation preload.\n *\n * @memberof workbox-navigation-preload\n */\nfunction isSupported() {\n    return Boolean(self.registration && self.registration.navigationPreload);\n}\nexport { isSupported };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { isSupported } from './isSupported.js';\nimport './_version.js';\n/**\n * If the browser supports Navigation Preload, then this will enable it.\n *\n * @param {string} [headerValue] Optionally, allows developers to\n * [override](https://developers.google.com/web/updates/2017/02/navigation-preload#changing_the_header)\n * the value of the `Service-Worker-Navigation-Preload` header which will be\n * sent to the server when making the navigation request.\n *\n * @memberof workbox-navigation-preload\n */\nfunction enable(headerValue) {\n    if (isSupported()) {\n        self.addEventListener('activate', (event) => {\n            event.waitUntil(self.registration.navigationPreload.enable().then(() => {\n                // Defaults to Service-Worker-Navigation-Preload: true if not set.\n                if (headerValue) {\n                    void self.registration.navigationPreload.setHeaderValue(headerValue);\n                }\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.log(`Navigation preload is enabled.`);\n                }\n            }));\n        });\n    }\n    else {\n        if (process.env.NODE_ENV !== 'production') {\n            logger.log(`Navigation preload is not supported in this browser.`);\n        }\n    }\n}\nexport { enable };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport './_version.js';\n/**\n * Claim any currently available clients once the service worker\n * becomes active. This is normally used in conjunction with `skipWaiting()`.\n *\n * @memberof workbox-core\n */\nfunction clientsClaim() {\n    self.addEventListener('activate', () => self.clients.claim());\n}\nexport { clientsClaim };\n","import { precacheAndRoute, cleanupOutdatedCaches } from 'workbox-precaching'\nimport * as navigationPreload from 'workbox-navigation-preload'\nimport { clientsClaim } from 'workbox-core'\n\nconst CACHE = 'po-cache'\nconst entries = self.__WB_MANIFEST\nconst offlineFallbackPage = 'offline'\n\nself.skipWaiting()\nclientsClaim()\n\ncleanupOutdatedCaches()\nprecacheAndRoute(entries)\n\nself.addEventListener('install', async (event) => {\n  event.waitUntil(caches.open(CACHE).then((cache) => cache.add(offlineFallbackPage)))\n})\n\nif (navigationPreload.isSupported()) {\n  navigationPreload.enable()\n}\n\nself.addEventListener('fetch', (event) => {\n  if (event.request.mode === 'navigate') {\n    event.respondWith(\n      (async () => {\n        try {\n          const preloadResp = await event.preloadResponse\n\n          if (preloadResp) {\n            return preloadResp\n          }\n\n          const networkResp = await fetch(event.request)\n          return networkResp\n        } catch (error) {\n          const cache = await caches.open(CACHE)\n          const cachedResp = await cache.match(offlineFallbackPage)\n          return cachedResp\n        }\n      })()\n    )\n  }\n})\n\n/*\n *\n * Push notifications\n *\n */\n\nfunction sendNotification(data) {\n  return self.registration.showNotification(data.title, data)\n}\n\nself.addEventListener('push', (event) => {\n  if (!(self.Notification && self.Notification.permission === 'granted')) {\n    return\n  }\n\n  // https://developer.mozilla.org/en-US/docs/Web/API/PushMessageData\n  if (event.data) {\n    event.waitUntil(sendNotification(event.data.json()))\n  }\n})\n\nself.addEventListener('notificationclick', (event) => {\n  const clickedNotification = event.notification\n  let action = null\n  let url = null\n\n  if (!action) {\n    //Default to the first action defined\n    url = clickedNotification.actions[0].action\n  } else {\n    url = clickedNotification.actions[action].action\n  }\n\n  const promiseChain = self.clients\n    .matchAll({\n      type: 'window',\n      includeUncontrolled: true\n    })\n    .then((windowClients) => {\n      let matchingClient = null\n\n      for (let i = 0; i < windowClients.length; i++) {\n        const windowClient = windowClients[i]\n\n        if (windowClient.url === url) {\n          matchingClient = windowClient\n          break\n        }\n      }\n\n      if (matchingClient) {\n        return matchingClient.focus()\n      } else {\n        return self.clients.openWindow(url)\n      }\n    })\n\n  event.waitUntil(promiseChain)\n  clickedNotification.close()\n})\n"]}